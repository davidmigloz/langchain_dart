#file: noinspection YAMLSchemaValidation
openapi: 3.0.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see
    https://platform.openai.com/docs/api-reference for more details.
  version: 2.3.0
  termsOfService: https://openai.com/policies/terms-of-use
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
components:
  schemas:
    AudioFormat:
      type: string
      description: The format of the audio.
      enum:
        - pcm16
        - g711_ulaw
        - g711_alaw
    Voice:
      type: string
      description: The voice used by the model.
      enum:
        - alloy
        - ash
        - ballad
        - coral
        - echo
        - sage
        - shimmer
        - verse
    ItemRole:
      type: string
      description: The role associated with the item.
      enum:
        - user
        - assistant
        - system
    ItemType:
      type: string
      description: The type of the item.
      enum:
        - message
        - function_call
        - function_call_output
    ItemStatus:
      type: string
      description: The status of the item.
      enum:
        - completed
        - in_progress
        - incomplete
    ContentType:
      type: string
      description: The type of the content.
      enum:
        - input_text
        - input_audio
        - text
        - audio
    ObjectType:
      type: string
      description: The object type.
      enum:
        - realtime.item
        - realtime.response
        - realtime.session
        - realtime.conversation
    ToolType:
      type: string
      description: The type of the tool. Currently, only `function` is supported.
      enum:
        - function
    ToolDefinition:
      type: object
      description: The definition of a tool the model may use.
      properties:
        type:
          $ref: "#/components/schemas/ToolType"
          default: function
          description: The type of the tool, i.e. `function`.
        name:
          type: string
          description: The name of the function.
        description:
          type: string
          description: |
            The description of the function, including guidance on when and how 
            to call it, and guidance about what to tell the user when calling 
            (if anything).
        parameters:
          type: object
          description: Parameters of the function in JSON Schema.
      required:
        - name
    ToolChoiceForced:
      type: object
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
      properties:
        type:
          $ref: "#/components/schemas/ToolType"
          default: function
        name:
          type: string
          description: The name of the function to call.
      required:
        - name
    ContentPart:
      description: A part of the content.
      oneOf:
        - $ref: "#/components/schemas/ContentPartInputText"
        - $ref: "#/components/schemas/ContentPartInputAudio"
        - $ref: "#/components/schemas/ContentPartText"
        - $ref: "#/components/schemas/ContentPartAudio"
      discriminator:
        propertyName: type
    ContentPartInputText:
      type: object
      description: A part of the input text content.
      properties:
        type:
          $ref: "#/components/schemas/ContentType"
          description: The content type.
          default: input_text
        text:
          type: string
          description: The text content.
      required:
        - text
    ContentPartInputAudio:
      type: object
      description: A part of the input audio content.
      properties:
        type:
          $ref: "#/components/schemas/ContentType"
          description: The content type.
          default: input_audio
        audio:
          type: string
          description: Base64-encoded audio bytes.
        transcript:
          type: string
          description: The transcript of the audio.
    ContentPartText:
      type: object
      description: A part of the text content.
      properties:
        type:
          $ref: "#/components/schemas/ContentType"
          description: The content type.
          default: text
        text:
          type: string
          description: The text content.
      required:
        - text
    ContentPartAudio:
      type: object
      description: A part of the audio content.
      properties:
        type:
          $ref: "#/components/schemas/ContentType"
          description: The content type.
          default: audio
        audio:
          type: string
          description: Base64-encoded audio bytes.
        transcript:
          type: string
          description: The transcript of the audio.
    Item:
      type: object
      description: The item to add to the conversation.
      oneOf:
        - $ref: "#/components/schemas/ItemMessage"
        - $ref: "#/components/schemas/ItemFunctionCall"
        - $ref: "#/components/schemas/ItemFunctionCallOutput"
      discriminator:
        propertyName: type
    ItemMessage:
      type: object
      description: A message item.
      properties:
        id:
          type: string
          description: |
            The unique ID of the item, this can be generated by the client to help manage server-side context,
            but is not required because the server will generate one if not provided.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type, must be "realtime.item".
        type:
          $ref: "#/components/schemas/ItemType"
          description: The type of the item.
          default: message
        status:
          $ref: "#/components/schemas/ItemStatus"
          description: |
            The status of the item. These have no effect on the conversation, but are accepted for consistency 
            with the `conversation.item.created` event.
        role:
          $ref: "#/components/schemas/ItemRole"
          description: |
            The role of the message sender.
        content:
          type: array
          description: |
            The content of the message. Message items with a role of `system` support only `input_text` content, 
            message items of role `user` support `input_text` and `input_audio` content, and message items of role 
            `assistant` support `text` content.
          items:
            $ref: "#/components/schemas/ContentPart"
      required:
        - id
        - role
        - content
    ItemFunctionCall:
      type: object
      description: A function call item.
      properties:
        id:
          type: string
          description: |
            The unique ID of the item, this can be generated by the client to help manage server-side context,
            but is not required because the server will generate one if not provided.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type.
          default: realtime.item
        type:
          $ref: "#/components/schemas/ItemType"
          description: The type of the item.
          default: function_call
        status:
          $ref: "#/components/schemas/ItemStatus"
          description: |
            The status of the item. These have no effect on the conversation, but are accepted for consistency 
            with the `conversation.item.created` event.
        call_id:
          type: string
          description: |
            The ID of the function call (for `function_call` and `function_call_output` items). If passed on a
            `function_call_output` item, the server will check that a `function_call` item with the same ID
            exists in the conversation history.
        name:
          type: string
          description: The name of the function being called.
        arguments:
          type: string
          description: The arguments of the function call.
      required:
        - id
        - call_id
        - name
        - arguments
    ItemFunctionCallOutput:
      type: object
      description: A function call output item.
      properties:
        id:
          type: string
          description: |
            The unique ID of the item, this can be generated by the client to help manage server-side context,
            but is not required because the server will generate one if not provided.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type. Always "realtime.item".
        type:
          $ref: "#/components/schemas/ItemType"
          description: The type of the item.
          default: function_call_output
        status:
          $ref: "#/components/schemas/ItemStatus"
          description: |
            The status of the item. These have no effect on the conversation, but are accepted for consistency 
            with the `conversation.item.created` event.
        call_id:
          type: string
          description: The ID of the function call.
        output:
          type: string
          description: The output of the function call.
      required:
        - id
        - call_id
        - output
    InputAudioTranscriptionConfig:
      type: object
      description: Configuration for input audio transcription.
      properties:
        enabled:
          type: boolean
          description: Whether input audio transcription is enabled.
        model:
          type: string
          description: |
            The model to use for transcription, `whisper-1` is the only currently 
            supported model.
    TurnDetection:
      type: object
      description: |
        Configuration for turn detection. Can be set to `null` to turn off. Server 
        VAD means that the model will detect the start and end of speech based on 
        audio volume and respond at the end of user speech.
      properties:
        type:
          $ref: "#/components/schemas/TurnDetectionType"
          description: |
            Type of turn detection, only `server_vad` is currently supported.
        threshold:
          type: number
          description: |
            Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
            higher threshold will require louder audio to activate the model, and 
            thus might perform better in noisy environments.
        prefix_padding_ms:
          type: integer
          description: |
            Amount of audio to include before the VAD detected speech (in 
            milliseconds). Defaults to 300ms.
        silence_duration_ms:
          type: integer
          description: |
            Duration of silence to detect speech stop (in milliseconds). Defaults 
            to 500ms. With shorter values the model will respond more quickly, 
            but may jump in on short pauses from the user.
      required:
        - type
    TurnDetectionType:
      type: string
      description: The type of turn detection.
      enum:
        - server_vad
    RateLimit:
      type: object
      description: Rate limit information.
      properties:
        name:
          $ref: "#/components/schemas/RateLimitName"
          description: The name of the rate limit (`requests`, `tokens`).
        limit:
          type: integer
          description: The maximum allowed value for the rate limit.
        remaining:
          type: integer
          description: The remaining value before the limit is reached.
        reset_seconds:
          type: number
          description: Seconds until the rate limit resets.
      required:
        - name
        - limit
        - remaining
        - reset_seconds
    RateLimitName:
      type: string
      description: The name of the rate limit.
      enum:
        - requests
        - tokens
        - input_tokens
        - output_tokens
    Response:
      type: object
      description: The response resource.
      properties:
        id:
          type: string
          description: The unique ID of the response.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type, must be "realtime.response".
          default: realtime.response
        status:
          $ref: "#/components/schemas/ResponseStatus"
          description: The status of the response.
        status_details:
          $ref: "#/components/schemas/ResponseStatusDetails"
          description: Additional details about the status.
          nullable: true
        output:
          type: array
          description: The list of output items generated by the response.
          items:
            $ref: "#/components/schemas/Item"
            description: An item in the response output.
        usage:
          $ref: "#/components/schemas/Usage"
      required:
        - id
        - status
        - output
    ResponseStatus:
      type: string
      description: The status of the response.
      enum:
        - in_progress
        - completed
        - cancelled
        - failed
        - incomplete
    ResponseStatusDetails:
      description: Additional details about the status.
      oneOf:
        - $ref: "#/components/schemas/ResponseStatusDetailsCancelled"
        - $ref: "#/components/schemas/ResponseStatusDetailsIncomplete"
        - $ref: "#/components/schemas/ResponseStatusDetailsFailed"
      discriminator:
        propertyName: type
    ResponseStatusType:
      type: string
      description: The type of error that caused the response to fail.
      enum:
        - cancelled
        - incomplete
        - failed
    ResponseStatusDetailsCancelled:
      type: object
      description: Details about the cancelled response.
      properties:
        type:
          $ref: "#/components/schemas/ResponseStatusType"
          default: cancelled
        reason:
          $ref: "#/components/schemas/ResponseStatusIncompleteReason"
    ResponseStatusDetailsIncomplete:
      type: object
      description: Details about the incomplete response.
      properties:
        type:
          $ref: "#/components/schemas/ResponseStatusType"
          default: incomplete
        reason:
          $ref: "#/components/schemas/ResponseStatusIncompleteReason"
    ResponseStatusIncompleteReason:
      type: string
      description: |
        The reason the Response did not complete. For a `cancelled` Response, one of `turn_detected`
        (the server VAD detected a new start of speech) or `client_cancelled` (the client sent a
        cancel event). For an `incomplete` Response, one of `max_output_tokens` or `content_filter`
        (the server-side safety filter activated and cut off the response).
      enum:
        - turn_detected
        - client_cancelled
        - interruption
        - max_output_tokens
        - content_filter
    ResponseStatusDetailsFailed:
      type: object
      description: Details about the failed response.
      properties:
        type:
          $ref: "#/components/schemas/ResponseStatusType"
          default: failed
        error:
          $ref: "#/components/schemas/APIError"
          nullable: true
    ResponseConfig:
      type: object
      description: Configuration for the response.
      properties:
        modalities:
          type: array
          description: The modalities for the response.
          items:
            $ref: "#/components/schemas/Modality"
        instructions:
          type: string
          description: Instructions for the model.
        voice:
          $ref: "#/components/schemas/Voice"
          description: The voice the model uses to respond - one of `alloy`, `echo`, or
            `shimmer`.
        output_audio_format:
          $ref: "#/components/schemas/AudioFormat"
          description: The format of output audio.
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/ToolDefinition"
        tool_choice:
          description: How the model chooses tools.
          oneOf:
            - type: string
              title: ResponseConfigToolChoiceMode
              description: >
                `none` means the model will not call any tool and instead generates a message.
                `auto` means the model can pick between generating a message or calling one or more tools.
                `required` means the model must call one or more tools.
              enum: [ none, auto, required ]
            - $ref: "#/components/schemas/ToolChoiceForced"
        temperature:
          type: number
          description: Sampling temperature.
        max_response_output_tokens:
          description: Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Defaults to "inf".
          oneOf:
            - type: integer
              description: Provide an integer between 1 and 4096 to limit output tokens.
            - type: string
              description: Use inf for the maximum available tokens for a given model.
              default: inf
    Usage:
      type: object
      description: |
        Usage statistics for the Response, this will correspond to billing. A Realtime API session will
        maintain a conversation context and append new Items to the Conversation, thus output from
        previous turns (text and audio tokens) will become the input for later turns.
      properties:
        total_tokens:
          type: integer
          description: The total number of tokens in the Response including input and output text and audio tokens.
        input_tokens:
          type: integer
          description: The number of input tokens used in the Response, including text and audio tokens.
        output_tokens:
          type: integer
          description: The number of output tokens sent in the Response, including text and audio tokens.
        input_token_details:
          type: object
          description: Details about the input tokens used in the Response.
          properties:
            cached_tokens:
              type: integer
              description: The number of cached tokens used in the Response.
            text_tokens:
              type: integer
              description: The number of text tokens used in the Response.
            audio_tokens:
              type: integer
              description: The number of audio tokens used in the Response.
        output_token_details:
          type: object
          description: Details about the output tokens used in the Response.
          properties:
            text_tokens:
              type: integer
              description: The number of text tokens used in the Response.
            audio_tokens:
              type: integer
              description: The number of audio tokens used in the Response.
    Session:
      type: object
      description: The session resource.
      properties:
        id:
          type: string
          description: The unique ID of the session.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type, must be "realtime.session".
          default: realtime.session
        model:
          type: string
          description: The default model used for this session.
        expires_at:
          type: integer
          description: The time at which the session expires.
        modalities:
          type: array
          description: The set of modalities the model can respond with.
          items:
            $ref: "#/components/schemas/Modality"
        instructions:
          type: string
          description: The default system instructions.
        voice:
          $ref: "#/components/schemas/Voice"
          description: The voice the model uses to respond - one of `alloy`, `echo`, or
            `shimmer`.
        input_audio_format:
          $ref: "#/components/schemas/AudioFormat"
          description: The format of input audio.
        output_audio_format:
          $ref: "#/components/schemas/AudioFormat"
          description: The format of output audio.
        input_audio_transcription:
          $ref: "#/components/schemas/InputAudioTranscriptionConfig"
        turn_detection:
          $ref: "#/components/schemas/TurnDetection"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/ToolDefinition"
        tool_choice:
          description: How the model chooses tools.
          oneOf:
            - type: string
              title: SessionToolChoiceMode
              description: >
                `none` means the model will not call any tool and instead generates a message.
                `auto` means the model can pick between generating a message or calling one or more tools.
                `required` means the model must call one or more tools.
              enum: [ none, auto, required ]
            - $ref: "#/components/schemas/ToolChoiceForced"
        temperature:
          type: number
          description: Sampling temperature.
        max_response_output_tokens:
          description: Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Defaults to "inf".
          oneOf:
            - type: integer
              description: Provide an integer between 1 and 4096 to limit output tokens.
            - type: string
              description: Use inf for the maximum available tokens for a given model.
              default: inf
    SessionConfig:
      type: object
      description: Session configuration to update.
      properties:
        modalities:
          type: array
          items:
            $ref: "#/components/schemas/Modality"
          description: |
            The set of modalities the model can respond with. To disable audio, set this to ["text"].
        instructions:
          type: string
          description: |
            The default system instructions (i.e. system message) prepended to model 
            calls. This field allows the client to guide the model on desired 
            responses. The model can be instructed on response content and format, 
            (e.g. "be extremely succinct", "act friendly", "here are examples of good 
            responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
            into your voice", "laugh frequently"). The instructions are not guaranteed 
            to be followed by the model, but they provide guidance to the model on the 
            desired behavior.

            Note that the server sets default instructions which will be used if this 
            field is not set and are visible in the `session.created` event at the 
            start of the session.
        voice:
          $ref: "#/components/schemas/Voice"
          description: |
            The voice the model uses to respond. Supported voices are `alloy`, `ash`,
            `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`. Cannot be 
            changed once the model has responded with audio at least once.
        input_audio_format:
          $ref: "#/components/schemas/AudioFormat"
          description: |
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        output_audio_format:
          $ref: "#/components/schemas/AudioFormat"
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        input_audio_transcription:
          $ref: "#/components/schemas/InputAudioTranscriptionConfig"
          description: |
            Configuration for input audio transcription, defaults to off and can be 
            set to `null` to turn off once on. Input audio transcription is not native 
            to the model, since the model consumes audio directly. Transcription runs 
            asynchronously through Whisper and should be treated as rough guidance 
            rather than the representation understood by the model.
          nullable: true
        turn_detection:
          $ref: "#/components/schemas/TurnDetection"
          nullable: true
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/ToolDefinition"
        tool_choice:
          description: |
            How the model chooses tools. Options are `auto`, `none`, `required`, or 
            specify a function.
          oneOf:
            - type: string
              title: SessionConfigToolChoiceMode
              description: >
                `none` means the model will not call any tool and instead generates a message.
                `auto` means the model can pick between generating a message or calling one or more tools.
                `required` means the model must call one or more tools.
              enum: [ none, auto, required ]
            - $ref: "#/components/schemas/ToolChoiceForced"
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
        max_response_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
          oneOf:
            - type: integer
              description: Provide an integer between 1 and 4096 to limit output tokens.
            - type: string
              description: Use inf for the maximum available tokens for a given model.
              default: inf
    Conversation:
      type: object
      description: The conversation resource.
      properties:
        id:
          type: string
          description: The unique ID of the conversation.
        object:
          $ref: "#/components/schemas/ObjectType"
          description: The object type, must be "realtime.conversation".
          default: realtime.conversation
      required:
        - id
    Modality:
      type: string
      description: The modality of the model response.
      enum:
        - text
        - audio
    Delta:
      type: object
      description: Delta object.
      properties:
        transcript:
          type: string
          description: The transcript of the audio.
          nullable: true
        audio:
          type: string
          format: byte
          description: The audio bytes.
          nullable: true
        text:
          type: string
          nullable: true
          description: The text.
        arguments:
          type: string
          nullable: true
          description: The arguments.
    FormattedTool:
      type: object
      description: A formatted tool.
      properties:
        type:
          $ref: "#/components/schemas/ToolType"
          default: function
        name:
          type: string
          description: The name of the function.
        call_id:
          type: string
          description: The call id.
        arguments:
          type: string
          description: The arguments.
      required:
        - name
        - call_id
        - arguments
    FormattedProperty:
      type: object
      description: A formatted property.
      properties:
        audio:
          type: string
          format: byte
          description: The audio bytes.
        text:
          type: string
          description: The text.
        transcript:
          type: string
          description: The transcript.
        tool:
          $ref: '#/components/schemas/FormattedTool'
          nullable: true
        output:
          type: string
          nullable: true
          description: The output.
      required:
        - audio
        - text
        - transcript
    FormattedItem:
      type: object
      description: A formatted item.
      properties:
        item:
          $ref: '#/components/schemas/Item'
        formatted:
          $ref: '#/components/schemas/FormattedProperty'
          nullable: true
      required:
        - item
        - formatted
    ItemSpeech:
      type: object
      description: The speech item.
      properties:
        audioStartMs:
          type: integer
          format: int32
          description: The start time of the audio in milliseconds.
        audioEndMs:
          type: integer
          format: int32
          description: The end time of the audio in milliseconds.
          nullable: true
        audio:
          type: string
          format: byte
          description: The audio bytes.
          nullable: true
      required:
        - audioStartMs
    ItemTranscript:
      type: object
      description: The transcript item.
      properties:
        transcript:
          type: string
          description: The transcript.
      required:
        - transcript
    EventHandlerResult:
      type: object
      description:
      properties:
        item:
          $ref: '#/components/schemas/FormattedItem'
          nullable: true
        delta:
          $ref: '#/components/schemas/Delta'
          nullable: true
        response:
          $ref: '#/components/schemas/Response'
          nullable: true
    TranscriptionError:
      type: object
      description: Details of the transcription error.
      properties:
        type:
          type: string
          description: The type of the error.
        code:
          type: string
          description: Error code, if any.
        message:
          type: string
          description: A human-readable error message.
        param:
          type: string
          description: Parameter related to the error, if any.
    APIError:
      type: object
      description: Details of the API error.
      properties:
        type:
          type: string
          description: The type of error (e.g., "invalid_request_error", "server_error").
        code:
          type: string
          description: Error code, if any.
        message:
          type: string
          description: A human-readable error message.
        param:
          type: string
          description: Parameter related to the error, if any.
        event_id:
          type: string
          description: The event_id of the client event that caused the error, if
            applicable.
    RealtimeEvent:
      type: object
      description: A Realtime API event.
      oneOf:
        - $ref: "#/components/schemas/RealtimeEventConversationItemCreate"
        - $ref: "#/components/schemas/RealtimeEventConversationItemDelete"
        - $ref: "#/components/schemas/RealtimeEventConversationItemTruncate"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferAppend"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferClear"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferCommit"
        - $ref: "#/components/schemas/RealtimeEventResponseCancel"
        - $ref: "#/components/schemas/RealtimeEventResponseCreate"
        - $ref: "#/components/schemas/RealtimeEventSessionUpdate"
        - $ref: "#/components/schemas/RealtimeEventConversationCreated"
        - $ref: "#/components/schemas/RealtimeEventConversationItemCreated"
        - $ref: "#/components/schemas/RealtimeEventConversationItemDeleted"
        - $ref: "#/components/schemas/RealtimeEventConversationItemInputAudioTranscriptionCompleted"
        - $ref: "#/components/schemas/RealtimeEventConversationItemInputAudioTranscriptionFailed"
        - $ref: "#/components/schemas/RealtimeEventConversationItemTruncated"
        - $ref: "#/components/schemas/RealtimeEventError"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferCleared"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferCommitted"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferSpeechStarted"
        - $ref: "#/components/schemas/RealtimeEventInputAudioBufferSpeechStopped"
        - $ref: "#/components/schemas/RealtimeEventRateLimitsUpdated"
        - $ref: "#/components/schemas/RealtimeEventResponseAudioDelta"
        - $ref: "#/components/schemas/RealtimeEventResponseAudioDone"
        - $ref: "#/components/schemas/RealtimeEventResponseAudioTranscriptDelta"
        - $ref: "#/components/schemas/RealtimeEventResponseAudioTranscriptDone"
        - $ref: "#/components/schemas/RealtimeEventResponseContentPartAdded"
        - $ref: "#/components/schemas/RealtimeEventResponseContentPartDone"
        - $ref: "#/components/schemas/RealtimeEventResponseCreated"
        - $ref: "#/components/schemas/RealtimeEventResponseDone"
        - $ref: "#/components/schemas/RealtimeEventResponseFunctionCallArgumentsDelta"
        - $ref: "#/components/schemas/RealtimeEventResponseFunctionCallArgumentsDone"
        - $ref: "#/components/schemas/RealtimeEventResponseOutputItemAdded"
        - $ref: "#/components/schemas/RealtimeEventResponseOutputItemDone"
        - $ref: "#/components/schemas/RealtimeEventResponseTextDelta"
        - $ref: "#/components/schemas/RealtimeEventResponseTextDone"
        - $ref: "#/components/schemas/RealtimeEventSessionCreated"
        - $ref: "#/components/schemas/RealtimeEventSessionUpdated"
        - $ref: "#/components/schemas/RealtimeEventClose"
        - $ref: "#/components/schemas/RealtimeEventConversationInterrupted"
        - $ref: "#/components/schemas/RealtimeEventConversationUpdated"
        - $ref: "#/components/schemas/RealtimeEventConversationItemAppended"
        - $ref: "#/components/schemas/RealtimeEventConversationItemCompleted"
        - $ref: "#/components/schemas/RealtimeEventGeneric"
      discriminator:
        propertyName: type
    RealtimeEventType:
      type: string
      description: The type of the event.
      enum:
        - conversation.item.create
        - conversation.item.delete
        - conversation.item.truncate
        - input_audio_buffer.append
        - input_audio_buffer.clear
        - input_audio_buffer.commit
        - response.cancel
        - response.create
        - session.update
        - conversation.created
        - conversation.item.created
        - conversation.item.deleted
        - conversation.item.input_audio_transcription.completed
        - conversation.item.input_audio_transcription.failed
        - conversation.item.truncated
        - error
        - input_audio_buffer.cleared
        - input_audio_buffer.committed
        - input_audio_buffer.speech_started
        - input_audio_buffer.speech_stopped
        - rate_limits.updated
        - response.audio.delta
        - response.audio.done
        - response.audio_transcript.delta
        - response.audio_transcript.done
        - response.content_part.added
        - response.content_part.done
        - response.created
        - response.done
        - response.function_call_arguments.delta
        - response.function_call_arguments.done
        - response.output_item.added
        - response.output_item.done
        - response.text.delta
        - response.text.done
        - session.created
        - session.updated
        # Utility events
        - close
        - conversation.interrupted
        - conversation.updated
        - conversation.item.appended
        - conversation.item.completed
        - realtime.event
        - all
        - server.all
        - client.all
    RealtimeEventConversationItemCreate:
      type: object
      description: |
        Add a new Item to the Conversation's context, including messages, function calls, and function call
        responses. This event can be used both to populate a "history" of the conversation and to add new
        items mid-stream, but has the current limitation that it cannot populate assistant audio messages.

        If successful, the server will respond with a `conversation.item.created` event, otherwise an `error`
        event will be sent.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.create
        previous_item_id:
          type: string
          description: |
            The ID of the preceding item after which the new item will be inserted. If not set, the new item
            will be appended to the end of the conversation. If set, it allows an item to be inserted
            mid-conversation. If the ID cannot be found, an error will be returned and the item will not be
            added.
        item:
          $ref: "#/components/schemas/Item"
      required:
        - event_id
        - item
    RealtimeEventConversationItemDelete:
      type: object
      description: |
        Send this event when you want to remove any item from the conversation history. The server will
        respond with a `conversation.item.deleted` event, unless the item does not exist in the conversation
        history, in which case the server will respond with an error.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.delete
        item_id:
          type: string
          description: The ID of the item to delete.
      required:
        - event_id
        - item_id
    RealtimeEventConversationItemTruncate:
      type: object
      description: |
        Send this event to truncate a previous assistant message's audio. The server will produce audio faster
        than realtime, so this event is useful when the user interrupts to truncate audio that has already
        been sent to the client but not yet played. This will synchronize the server's understanding of the
        audio with the client's playback.

        Truncating audio will delete the server-side text transcript to ensure there is not text in the
        context that hasn't been heard by the user.

        If successful, the server will respond with a `conversation.item.truncated` event.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.truncate
        item_id:
          type: string
          description: The ID of the assistant message item to truncate. Only assistant message items can be truncated.
        content_index:
          type: integer
          description: The index of the content part to truncate. Set this to 0.
        audio_end_ms:
          type: integer
          description: |
            Inclusive duration up to which audio is truncated, in milliseconds. If the audio_end_ms is greater
            than the actual audio duration, the server will respond with an error.
      required:
        - event_id
        - item_id
        - content_index
        - audio_end_ms
    RealtimeEventInputAudioBufferAppend:
      type: object
      description: |
        Send this event to append audio bytes to the input audio buffer. The audio buffer is temporary storage
        you can write to and later commit. In Server VAD mode, the audio buffer is used to detect speech and
        the server will decide when to commit. When Server VAD is disabled, you must commit the audio buffer
        manually.

        The client may choose how much audio to place in each event up to a maximum of 15 MiB, for example
        streaming smaller chunks from the client may allow the VAD to be more responsive. Unlike made other
        client events, the server will not send a confirmation response to this event.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.append
        audio:
          type: string
          description: |
            Base64-encoded audio bytes. This must be in the format specified by the `input_audio_format` field
            in the session configuration.
      required:
        - event_id
        - audio
    RealtimeEventInputAudioBufferClear:
      type: object
      description: |
        Send this event to clear the audio bytes in the buffer. The server will respond with an
        `input_audio_buffer.cleared` event.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.clear
      required:
        - event_id
    RealtimeEventInputAudioBufferCommit:
      type: object
      description: |
        Send this event to commit the user input audio buffer, which will create a new user message item in
        the conversation. This event will produce an error if the input audio buffer is empty. When in Server
        VAD mode, the client does not need to send this event, the server will commit the audio buffer
        automatically.

        Committing the input audio buffer will trigger input audio transcription (if enabled in session
        configuration), but it will not create a response from the model. The server will respond with an
        `input_audio_buffer.committed` event.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.commit
      required:
        - event_id
    RealtimeEventResponseCancel:
      type: object
      description: |
        Send this event to cancel an in-progress response. The server will respond with a `response.cancelled`
        event or an error if there is no response to cancel.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.cancel
      required:
        - event_id
    RealtimeEventResponseCreate:
      type: object
      description: |
        This event instructs the server to create a Response, which means triggering model inference. When in
        Server VAD mode, the server will create Responses automatically.

        A Response will include at least one Item, and may have two, in which case the second will be a
        function call. These Items will be appended to the conversation history.

        The server will respond with a `response.created` event, events for Items and content created, and
        finally a `response.done` event to indicate the Response is complete.

        The `response.create` event includes inference configuration like `instructions`, and `temperature`.
        These fields will override the Session's configuration for this Response only.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.create
        response:
          $ref: "#/components/schemas/ResponseConfig"
      required:
        - event_id
    RealtimeEventSessionUpdate:
      type: object
      description: |
        Send this event to update the session's default configuration. The client may send this event at any
        time to update the session configuration, and any field may be updated at any time, except for
        "voice". The server will respond with a `session.updated` event that shows the full effective
        configuration. Only fields that are present are updated, thus the correct way to clear a field like
        "instructions" is to pass an empty string.
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: session.update
        session:
          $ref: "#/components/schemas/SessionConfig"
      required:
        - session
    RealtimeEventConversationCreated:
      type: object
      description: |
        Returned when a conversation is created. Emitted right after session creation.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.created
        conversation:
          $ref: "#/components/schemas/Conversation"
      required:
        - event_id
        - conversation
    RealtimeEventConversationItemCreated:
      type: object
      description: |
        Returned when a conversation item is created. There are several scenarios that produce this event:
          - The server is generating a Response, which if successful will produce either one or two Items, which will 
            be of type `message` (role `assistant`) or type `function_call`.
          - The input audio buffer has been committed, either by the client or the server (in `server_vad` mode). The 
            server will take the content of the input audio buffer and add it to a new user message Item.
          - The client has sent a `conversation.item.create` event to add a new Item to the Conversation.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.created
        previous_item_id:
          type: string
          nullable: true
          description: |
            The ID of the preceding item in the Conversation context, allows the client to understand the
            order of the conversation.
        item:
          $ref: "#/components/schemas/Item"
      required:
        - event_id
        - previous_item_id
        - item
    RealtimeEventConversationItemDeleted:
      type: object
      description: |
        Returned when an item in the conversation is deleted by the client with a `conversation.item.delete`
        event. This event is used to synchronize the server's understanding of the conversation history with
        the client's view.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.deleted
        item_id:
          type: string
          description: The ID of the item that was deleted.
      required:
        - event_id
        - item_id
    RealtimeEventConversationItemInputAudioTranscriptionCompleted:
      type: object
      description: |
        This event is the output of audio transcription for user audio written to the user audio buffer.
        Transcription begins when the input audio buffer is committed by the client or server (in `server_vad`
        mode). Transcription runs asynchronously with Response creation, so this event may come before or
        after the Response events.

        Realtime API models accept audio natively, and thus input transcription is a separate process run on a
        separate ASR (Automatic Speech Recognition) model, currently always `whisper-1`. Thus the transcript
        may diverge somewhat from the model's interpretation, and should be treated as a rough guide.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.input_audio_transcription.completed
        item_id:
          type: string
          description: The ID of the user message item containing the audio.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        transcript:
          type: string
          description: The transcribed text.
      required:
        - event_id
        - item_id
        - content_index
        - transcript
    RealtimeEventConversationItemInputAudioTranscriptionFailed:
      type: object
      description: |
        Returned when input audio transcription is configured, and a transcription request for a user message
        failed. These events are separate from other `error` events so that the client can identify the
        related Item.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.input_audio_transcription.failed
        item_id:
          type: string
          description: The ID of the user message item.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        error:
          $ref: "#/components/schemas/TranscriptionError"
      required:
        - event_id
        - item_id
        - content_index
        - error
    RealtimeEventConversationItemTruncated:
      type: object
      description: |
        Returned when an earlier assistant audio message item is truncated by the client with a
        `conversation.item.truncate` event. This event is used to synchronize the server's understanding of
        the audio with the client's playback.

        This action will truncate the audio and remove the server-side text transcript to ensure there is no
        text in the context that hasn't been heard by the user.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.truncated
        item_id:
          type: string
          description: The ID of the assistant message item that was truncated.
        content_index:
          type: integer
          description: The index of the content part that was truncated.
        audio_end_ms:
          type: integer
          description: The duration up to which the audio was truncated, in milliseconds.
      required:
        - event_id
        - item_id
        - content_index
        - audio_end_ms
    RealtimeEventError:
      type: object
      description: |
        Returned when an error occurs, which could be a client problem or a server problem. Most errors are
        recoverable and the session will stay open, we recommend to implementors to monitor and log error
        messages by default.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: error
        error:
          $ref: "#/components/schemas/APIError"
      required:
        - event_id
        - error
    RealtimeEventInputAudioBufferCleared:
      type: object
      description: |
        Returned when the input audio buffer is cleared by the client with a `input_audio_buffer.clear` event.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.cleared
      required:
        - event_id
    RealtimeEventInputAudioBufferCommitted:
      type: object
      description: |
        Returned when an input audio buffer is committed, either by the client or automatically in server VAD
        mode. The `item_id` property is the ID of the user message item that will be created, thus a
        `conversation.item.created` event will also be sent to the client.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.committed
        previous_item_id:
          type: string
          description: The ID of the preceding item after which the new item will be
            inserted.
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      required:
        - event_id
        - previous_item_id
        - item_id
    RealtimeEventInputAudioBufferSpeechStarted:
      type: object
      description: |
        Sent by the server when in `server_vad` mode to indicate that speech has been detected in the audio
        buffer. This can happen any time audio is added to the buffer (unless speech is already detected). The
        client may want to use this event to interrupt audio playback or provide visual feedback to the user.
        The client should expect to receive a `input_audio_buffer.speech_stopped` event when speech stops. The
        `item_id` property is the ID of the user message item that will be created when speech stops and will
        also be included in the `input_audio_buffer.speech_stopped` event (unless the client manually commits
        the audio buffer during VAD activation).
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.speech_started
        audio_start_ms:
          type: integer
          description: |
            Milliseconds from the start of all audio written to the buffer during the session when speech was
            first detected. This will correspond to the beginning of audio sent to the model, and thus
            includes the `prefix_padding_ms` configured in the Session.
        item_id:
          type: string
          description: The ID of the user message item that will be created when speech
            stops.
      required:
        - event_id
        - audio_start_ms
        - item_id
    RealtimeEventInputAudioBufferSpeechStopped:
      type: object
      description: |
        Returned in `server_vad` mode when the server detects the end of speech in the audio buffer. The
        server will also send an `conversation.item.created` event with the user message item that is created
        from the audio buffer.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: input_audio_buffer.speech_stopped
        audio_end_ms:
          type: integer
          description: |
            Milliseconds since the session started when speech stopped. This will correspond to the end of
            audio sent to the model, and thus includes the `min_silence_duration_ms` configured in the
            Session.
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      required:
        - event_id
        - audio_end_ms
        - item_id
    RealtimeEventRateLimitsUpdated:
      type: object
      description: |
        Emitted at the beginning of a Response to indicate the updated rate limits. When a Response is created
        some tokens will be "reserved" for the output tokens, the rate limits shown here reflect that
        reservation, which is then adjusted accordingly once the Response is completed.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: rate_limits.updated
        rate_limits:
          type: array
          description: List of rate limit information.
          items:
            $ref: "#/components/schemas/RateLimit"
      required:
        - event_id
        - rate_limits
    RealtimeEventResponseAudioDelta:
      type: object
      description: Returned when the model-generated audio is updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.audio.delta
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: Base64-encoded audio data delta.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
    RealtimeEventResponseAudioDone:
      type: object
      description: Returned when the model-generated audio is done. Also emitted when
        a Response is interrupted, incomplete, or cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.audio.done
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
    RealtimeEventResponseAudioTranscriptDelta:
      type: object
      description: Returned when the model-generated transcription of audio output is
        updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.audio_transcript.delta
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The transcript delta.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
    RealtimeEventResponseAudioTranscriptDone:
      type: object
      description: Returned when the model-generated transcription of audio output is
        done streaming. Also emitted when a Response is interrupted, incomplete,
        or cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.audio_transcript.done
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        transcript:
          type: string
          description: The final transcript of the audio.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - transcript
    RealtimeEventResponseContentPartAdded:
      type: object
      description: Returned when a new content part is added to an assistant message
        item during response generation.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.content_part.added
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item to which the content part was added.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          $ref: "#/components/schemas/ContentPart"
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - part
    RealtimeEventResponseContentPartDone:
      type: object
      description: Returned when a content part is done streaming in an assistant
        message item. Also emitted when a Response is interrupted, incomplete,
        or cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.content_part.done
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          $ref: "#/components/schemas/ContentPart"
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - part
    RealtimeEventResponseCreated:
      type: object
      description: |
        Returned when a new Response is created. The first event of response creation, where the response is
        in an initial state of `in_progress`.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.created
        response:
          $ref: "#/components/schemas/Response"
      required:
        - event_id
        - response
    RealtimeEventResponseDone:
      type: object
      description: |
        Returned when a Response is done streaming. Always emitted, no matter the final state. The Response
        object included in the `response.done` event will include all output Items in the Response but will
        omit the raw audio data.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.done
        response:
          $ref: "#/components/schemas/Response"
      required:
        - event_id
        - response
    RealtimeEventResponseFunctionCallArgumentsDelta:
      type: object
      description: Returned when the model-generated function call arguments are updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.function_call_arguments.delta
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        delta:
          type: string
          description: The arguments delta as a JSON string.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - call_id
        - delta
    RealtimeEventResponseFunctionCallArgumentsDone:
      type: object
      description: Returned when the model-generated function call arguments are done
        streaming. Also emitted when a Response is interrupted, incomplete, or
        cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.function_call_arguments.done
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        arguments:
          type: string
          description: The final arguments as a JSON string.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - call_id
        - arguments
    RealtimeEventResponseOutputItemAdded:
      type: object
      description: Returned when a new Item is created during Response generation.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.output_item.added
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: "#/components/schemas/Item"
      required:
        - event_id
        - response_id
        - output_index
        - item
    RealtimeEventResponseOutputItemDone:
      type: object
      description: Returned when an Item is done streaming. Also emitted when a
        Response is interrupted, incomplete, or cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.output_item.done
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: "#/components/schemas/Item"
      required:
        - event_id
        - response_id
        - output_index
        - item
    RealtimeEventResponseTextDelta:
      type: object
      description: Returned when the text value of a "text" content part is updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.text.delta
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The text delta.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
    RealtimeEventResponseTextDone:
      type: object
      description: Returned when the text value of a "text" content part is done
        streaming. Also emitted when a Response is interrupted, incomplete, or
        cancelled.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: response.text.done
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        text:
          type: string
          description: The final text content.
      required:
        - event_id
        - response_id
        - item_id
        - output_index
        - content_index
        - text
    RealtimeEventSessionCreated:
      type: object
      description: |
        Returned when a Session is created. Emitted automatically when a new connection is established as the
        first server event. This event will contain the default Session configuration.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: session.created
        session:
          $ref: "#/components/schemas/Session"
      required:
        - event_id
        - session
    RealtimeEventSessionUpdated:
      type: object
      description: Returned when a session is updated with a `session.update` event, unless there is an error.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: session.updated
        session:
          $ref: "#/components/schemas/Session"
      required:
        - event_id
        - session
    RealtimeEventClose:
      type: object
      description: The websocket connection was closed.
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: close
        error:
          type: boolean
          description: Whether the close was due to an error.
      required:
        - event_id
        - error
    RealtimeEventConversationInterrupted:
      type: object
      description: The conversation was interrupted.
      properties:
        event_id:
          type: string
          description: The unique ID of the event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.interrupted
      required:
        - event_id
    RealtimeEventConversationUpdated:
      type: object
      description: The conversation was updated.
      properties:
        event_id:
          type: string
          description: The unique ID of the event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.updated
        result:
          $ref: '#/components/schemas/EventHandlerResult'
      required:
        - event_id
        - result
    RealtimeEventConversationItemAppended:
      type: object
      description: An item was appended to the conversation.
      properties:
        event_id:
          type: string
          description: The unique ID of the event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.appended
        item:
          $ref: '#/components/schemas/FormattedItem'
      required:
        - event_id
        - item
    RealtimeEventConversationItemCompleted:
      type: object
      description: An item was completed.
      properties:
        event_id:
          type: string
          description: The unique ID of the event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: conversation.item.completed
        item:
          $ref: '#/components/schemas/FormattedItem'
      required:
        - event_id
        - item
    RealtimeEventGeneric:
      type: object
      description: A generic realtime event.
      properties:
        event_id:
          type: string
          description: The unique ID of the event.
        type:
          $ref: "#/components/schemas/RealtimeEventType"
          description: The type of the event.
          default: realtime.event
        event:
          $ref: '#/components/schemas/RealtimeEvent'
      required:
        - event_id
        - event
