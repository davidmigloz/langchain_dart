// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: invalid_annotation_target
part of open_a_i_schema;

// ==========================================
// CLASS: CompletionTokensDetails
// ==========================================

/// Breakdown of tokens used in a completion.
@freezed
abstract class CompletionTokensDetails with _$CompletionTokensDetails {
  const CompletionTokensDetails._();

  /// Factory constructor for CompletionTokensDetails
  const factory CompletionTokensDetails({
    /// When using Predicted Outputs, the number of tokens in the
    /// prediction that appeared in the completion.
    @JsonKey(name: 'accepted_prediction_tokens', includeIfNull: false)
    int? acceptedPredictionTokens,

    /// Audio input tokens generated by the model.
    @JsonKey(name: 'audio_tokens', includeIfNull: false) int? audioTokens,

    /// Tokens generated by the model for reasoning.
    @JsonKey(name: 'reasoning_tokens', includeIfNull: false)
    int? reasoningTokens,

    /// When using Predicted Outputs, the number of tokens in the
    /// prediction that did not appear in the completion. However, like
    /// reasoning tokens, these tokens are still counted in the total
    /// completion tokens for purposes of billing, output, and context window
    /// limits.
    @JsonKey(name: 'rejected_prediction_tokens', includeIfNull: false)
    int? rejectedPredictionTokens,
  }) = _CompletionTokensDetails;

  /// Object construction from a JSON representation
  factory CompletionTokensDetails.fromJson(Map<String, dynamic> json) =>
      _$CompletionTokensDetailsFromJson(json);

  /// List of all property names of schema
  static const List<String> propertyNames = [
    'accepted_prediction_tokens',
    'audio_tokens',
    'reasoning_tokens',
    'rejected_prediction_tokens'
  ];

  /// Perform validations on the schema property values
  String? validateSchema() {
    return null;
  }

  /// Map representation of object (not serialized)
  Map<String, dynamic> toMap() {
    return {
      'accepted_prediction_tokens': acceptedPredictionTokens,
      'audio_tokens': audioTokens,
      'reasoning_tokens': reasoningTokens,
      'rejected_prediction_tokens': rejectedPredictionTokens,
    };
  }
}
