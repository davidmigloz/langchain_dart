00:00 [32m+0[0m: [1m[90mloading test/streaming_test.dart[0m[0m                                                                                                                                                             00:00 [32m+0[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+2[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+3[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+4[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+5[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+7[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+8[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+9[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                         00:00 [32m+10[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+11[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+12[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+13[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+14[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+15[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+16[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+17[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+18[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+19[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+20[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+21[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+22[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+23[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+24[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+25[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+26[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+27[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+28[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+29[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+30[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+31[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+32[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+33[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+34[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+35[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+36[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+37[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+38[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+39[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+40[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+41[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+42[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+43[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+44[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+45[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+46[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+47[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+48[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+49[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+50[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+51[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+52[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+53[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+54[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+55[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+56[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+57[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+58[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+59[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+60[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+61[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+62[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+63[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+64[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+65[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+66[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+67[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+68[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+69[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+70[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+71[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+72[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+73[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+74[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                        00:00 [32m+75[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+76[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+77[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+78[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+79[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+80[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+81[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+82[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+83[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+84[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+85[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+86[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+86[0m[31m -1[0m: test/exception_handling_test.dart: Exception Handling provider exceptions (80% cases) throws on unsupported capability [1m[31m[E][0m[0m                                                               
  Expected: throws <Instance of 'Exception'>
    Actual: <Closure: () => Agent>
     Which: returned <Instance of 'Agent'>
  
  package:matcher                         expect
  test/exception_handling_test.dart 25:9  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/exception_handling_test.dart -p vm --plain-name 'Exception Handling provider exceptions (80% cases) throws on unsupported capability'
00:00 [32m+87[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+88[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+89[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+90[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+91[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+92[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+93[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+94[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+95[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+96[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+97[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+98[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+99[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                     00:00 [32m+100[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+101[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+102[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+103[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+104[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+105[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+106[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+107[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+108[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+109[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+110[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:00 [32m+111[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:01 [32m+111[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:01 [32m+112[0m[31m -1[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) openai:gpt-4o-mini: simple streaming works[0m                                                                    00:01 [32m+113[0m[31m -1[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:01 [32m+114[0m[31m -1[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:02 [32m+114[0m[31m -1[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:02 [32m+114[0m[31m -2[0m: test/metadata_test.dart: Message Metadata Anthropic attaches metadata for suppressed content [1m[31m[E][0m[0m                                                                                        
  FormatException: Unexpected character (at character 1)
  I can help you get a recipe, but I need a specific recipe name to look up. ...
  ^
  
  dart:convert                                    jsonDecode
  package:langchain_compat/src/agent.dart 340:24  Agent.runFor
  ===== asynchronous gap ===========================
  test/metadata_test.dart 43:22                   main.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/metadata_test.dart -p vm --plain-name 'Message Metadata Anthropic attaches metadata for suppressed content'
00:02 [32m+115[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:02 [32m+116[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:02 [32m+116[0m[31m -2[0m: test/debug_openrouter_test.dart: debug openrouter tool call[0m                                                                                                                             

Testing OpenRouter with tool...
00:03 [32m+117[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:03 [32m+118[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:03 [32m+119[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:04 [32m+119[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:04 [32m+119[0m[31m -2[0m: test/debug_openrouter_test.dart: debug openrouter tool call[0m                                                                                                                             
Output: 
I've used the `echo_tool` to say "hello" for you. It returned: "Echo: hello".

Number of messages: 4

Message 0: user
  hasToolCalls: false
  hasToolResults: false
  - TextPart: Use echo_tool to say "hello"...

Message 1: model
  hasToolCalls: true
  hasToolResults: false
  - ToolPart.call: echo_tool

Message 2: user
  hasToolCalls: false
  hasToolResults: true
  - ToolPart.result: echo_tool

Message 3: model
  hasToolCalls: false
  hasToolResults: false
  - TextPart: I've used the `echo_tool` to say "hello" for you. ...
00:04 [32m+120[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:04 [32m+121[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:04 [32m+122[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:04 [32m+123[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:05 [32m+123[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:05 [32m+124[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:05 [32m+125[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:05 [32m+126[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:05 [32m+127[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:06 [32m+127[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:06 [32m+128[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:06 [32m+129[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:06 [32m+130[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:06 [32m+131[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+131[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+132[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+133[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+134[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+135[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+136[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+137[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:07 [32m+138[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+138[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+139[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+140[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+141[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+142[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+143[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+144[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+145[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+146[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:08 [32m+147[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:09 [32m+147[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:09 [32m+148[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:09 [32m+149[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:09 [32m+150[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:09 [32m+151[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:10 [32m+151[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:10 [32m+152[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:10 [32m+153[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:10 [32m+154[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:10 [32m+155[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:11 [32m+155[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:11 [32m+156[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:12 [32m+156[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers message format consistency (80% cases) all providers handle basic text messages[0m                                                       00:12 [32m+157[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:12 [32m+158[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:12 [32m+159[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:12 [32m+160[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:13 [32m+160[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:13 [32m+161[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:13 [32m+162[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:13 [32m+163[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:14 [32m+163[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:14 [32m+164[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+164[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+165[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+166[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+167[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+168[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+169[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:15 [32m+170[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+170[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+171[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+172[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+173[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+174[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+175[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:16 [32m+176[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+176[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+177[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+178[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+179[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+180[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:17 [32m+181[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:18 [32m+181[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:18 [32m+182[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:18 [32m+183[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:18 [32m+184[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:18 [32m+185[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+185[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+186[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+187[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+188[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+189[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+190[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:19 [32m+191[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+191[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+192[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+193[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+194[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+195[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+196[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+197[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+198[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:20 [32m+199[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+199[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+200[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+201[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+202[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+203[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+204[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+205[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:21 [32m+206[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+206[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+207[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+208[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+209[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+210[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+211[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:22 [32m+212[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:23 [32m+212[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:23 [32m+213[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:23 [32m+214[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:23 [32m+215[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:23 [32m+216[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:24 [32m+216[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:24 [32m+217[0m[31m -2[0m: test/exception_handling_test.dart: Exception Handling edge cases handles concurrent exceptions[0m                                                                                          00:24 [32m+218[0m[31m -2[0m: test/model_options_test.dart: Model Options configuration flexibility (80% cases) agent respects system prompt[0m                                                                          00:24 [32m+219[0m[31m -2[0m: test/model_options_test.dart: Model Options configuration flexibility (80% cases) agent respects system prompt[0m                                                                          00:24 [32m+220[0m[31m -2[0m: test/model_options_test.dart: Model Options configuration flexibility (80% cases) agent respects system prompt[0m                                                                          00:25 [32m+220[0m[31m -2[0m: test/model_options_test.dart: Model Options configuration flexibility (80% cases) agent respects system prompt[0m                                                                          00:25 [32m+221[0m[31m -2[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) openrouter:google/gemini-2.5-flash: single tool orchestration[0m                          00:25 [32m+222[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers provider-specific formats (80% cases) Anthropic format compatibility[0m                                                                  00:25 [32m+223[0m[31m -2[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object openai - returns simple JSON object[0m                                                        00:25 [32m+224[0m[31m -2[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object openai - returns simple JSON object[0m                                                        00:25 [32m+225[0m[31m -2[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming accumulates correctly[0m                              00:25 [32m+226[0m[31m -2[0m: test/model_options_test.dart: Model Options edge cases extreme temperature values[0m                                                                                                       00:26 [32m+226[0m[31m -2[0m: test/model_options_test.dart: Model Options edge cases extreme temperature values[0m                                                                                                       00:26 [32m+227[0m[31m -2[0m: test/model_options_test.dart: Model Options edge cases extreme temperature values[0m                                                                                                       00:26 [32m+228[0m[31m -2[0m: test/model_options_test.dart: Model Options edge cases extreme temperature values[0m                                                                                                       00:26 [32m+229[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers provider-specific formats (80% cases) Google format compatibility[0m                                                                     00:26 [32m+230[0m[31m -2[0m: test/provider_mappers_test.dart: Provider Mappers provider-specific formats (80% cases) Google format compatibility[0m                                                                     00:26 [32m+230[0m[31m -3[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object together - returns simple JSON object [1m[31m[E][0m[0m                                                  
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 61:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns simple JSON object together - returns simple JSON object'
00:26 [32m+231[0m[31m -3[0m: test/provider_mappers_test.dart: Provider Mappers provider-specific formats (80% cases) Google format compatibility[0m                                                                     00:26 [32m+231[0m[31m -4[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object fireworks - returns simple JSON object [1m[31m[E][0m[0m                                                 
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 61:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns simple JSON object fireworks - returns simple JSON object'
00:26 [32m+231[0m[31m -5[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object cohere - returns simple JSON object [1m[31m[E][0m[0m                                                    
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "ce8f4665-2071-4308-a849-015ed68e79b1",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 61:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns simple JSON object cohere - returns simple JSON object'
00:26 [32m+232[0m[31m -5[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:26 [32m+233[0m[31m -5[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+233[0m[31m -5[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+234[0m[31m -5[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+235[0m[31m -5[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+235[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object lambda - returns simple JSON object [1m[31m[E][0m[0m                                                    
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 61:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns simple JSON object lambda - returns simple JSON object'
00:27 [32m+236[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+237[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:27 [32m+238[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:28 [32m+238[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:28 [32m+239[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:28 [32m+240[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:28 [32m+241[0m[31m -6[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) cohere:command-r-plus: single tool orchestration[0m                                       00:28 [32m+242[0m[31m -6[0m: test/model_options_test.dart: Model Options edge cases edge case temperature values[0m                                                                                                     00:28 [32m+243[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+243[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+244[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+245[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+246[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+247[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+248[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+249[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+250[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+251[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+252[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+253[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+254[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+255[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+256[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+257[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+258[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+259[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+260[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+261[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+262[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+263[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+264[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+265[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+266[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+267[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+268[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+269[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+270[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+271[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+272[0m[31m -6[0m: test/streaming_test.dart: Streaming basic streaming responses (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming accumulates correctly[0m                                           00:29 [32m+273[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+273[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+274[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+275[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+276[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+277[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:30 [32m+278[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:31 [32m+278[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:31 [32m+279[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:31 [32m+280[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:31 [32m+281[0m[31m -6[0m: test/typed_output_test.dart: Typed Output basic structured output returns simple JSON object anthropic - returns simple JSON object[0m                                                     00:31 [32m+282[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:32 [32m+282[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:32 [32m+283[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:32 [32m+284[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:33 [32m+284[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:33 [32m+285[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:33 [32m+286[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:34 [32m+286[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:34 [32m+287[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:34 [32m+288[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:35 [32m+288[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:35 [32m+289[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:35 [32m+290[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:36 [32m+290[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:36 [32m+291[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:36 [32m+292[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:36 [32m+293[0m[31m -6[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:36 [32m+293[0m[31m -7[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects together - handles nested objects [1m[31m[E][0m[0m                                                          
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 95:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handles nested objects together - handles nested objects'
00:36 [32m+293[0m[31m -8[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects fireworks - handles nested objects [1m[31m[E][0m[0m                                                         
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 95:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handles nested objects fireworks - handles nested objects'
00:36 [32m+293[0m[31m -9[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects cohere - handles nested objects [1m[31m[E][0m[0m                                                            
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "3b626753-41ee-4563-986e-f6de864457c6",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 95:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handles nested objects cohere - handles nested objects'
00:36 [32m+294[0m[31m -9[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:37 [32m+294[0m[31m -9[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                 00:37 [32m+294[0m[31m -10[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects lambda - handles nested objects [1m[31m[E][0m[0m                                                           
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 95:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handles nested objects lambda - handles nested objects'
00:37 [32m+295[0m[31m -10[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                00:37 [32m+296[0m[31m -10[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles rapid sequential requests[0m                00:37 [32m+296[0m[31m -11[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects google - handles nested objects [1m[31m[E][0m[0m                                                           
  Expected: <Instance of 'bool'>
    Actual: <null>
     Which: is not an instance of 'bool'
  
  package:matcher                     expect
  test/typed_output_test.dart 108:11  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13   main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handles nested objects google - handles nested objects'
00:38 [32m+296[0m[31m -12[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) openrouter - chef conversation with streaming [1m[31m[E][0m[0m              
  Expected: an object with length of <1>
    Actual: []
     Which: has length of <0>
  
  package:matcher                                expect
  test/typed_output_with_tools_test.dart 157:13  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) openrouter - chef conversation with streaming'
00:38 [32m+296[0m[31m -13[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) fireworks - chef conversation with streaming [1m[31m[E][0m[0m               
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_with_tools_test.dart 129:13                                           main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) fireworks - chef conversation with streaming'
00:38 [32m+297[0m[31m -13[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:38 [32m+297[0m[31m -14[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) cohere - chef conversation with streaming [1m[31m[E][0m[0m                  
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "413cb4c5-65b3-46a4-91c8-e370fed641c5",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_with_tools_test.dart 129:13                                           main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) cohere - chef conversation with streaming'
00:38 [32m+298[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:38 [32m+299[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:39 [32m+299[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:39 [32m+300[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:39 [32m+301[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:39 [32m+302[0m[31m -14[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: streams tool calls and results[0m                                                              00:39 [32m+303[0m[31m -14[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) google - chef conversation with streaming[0m                      00:40 [32m+303[0m[31m -14[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) google - chef conversation with streaming[0m                      00:40 [32m+303[0m[31m -15[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) google - chef conversation with streaming [1m[31m[E][0m[0m                  
  Expected: an object with length of <1>
    Actual: []
     Which: has length of <0>
  
  package:matcher                                expect
  test/typed_output_with_tools_test.dart 157:13  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) google - chef conversation with streaming'
00:40 [32m+304[0m[31m -15[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:40 [32m+305[0m[31m -15[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:41 [32m+305[0m[31m -15[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:41 [32m+306[0m[31m -15[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:41 [32m+307[0m[31m -15[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:41 [32m+307[0m[31m -16[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) google-openai - chef conversation with streaming [1m[31m[E][0m[0m           
  Expected: an object with length of <1>
    Actual: []
     Which: has length of <0>
  
  package:matcher                                expect
  test/typed_output_with_tools_test.dart 157:13  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) google-openai - chef conversation with streaming'
00:41 [32m+308[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:42 [32m+308[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:42 [32m+309[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:42 [32m+310[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:43 [32m+310[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:44 [32m+310[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:44 [32m+311[0m[31m -16[0m: test/typed_output_test.dart: Typed Output basic structured output handles nested objects anthropic - handles nested objects[0m                                                            00:44 [32m+312[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:45 [32m+312[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:45 [32m+313[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:46 [32m+313[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:46 [32m+314[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:46 [32m+315[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:46 [32m+316[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:46 [32m+317[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:47 [32m+317[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:47 [32m+318[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:47 [32m+319[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:47 [32m+320[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:48 [32m+320[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:48 [32m+321[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:48 [32m+322[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:49 [32m+322[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:49 [32m+323[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:50 [32m+323[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:50 [32m+324[0m[31m -16[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:50 [32m+324[0m[31m -17[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified together - returns arrays when specified [1m[31m[E][0m[0m                                           
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 132:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns arrays when specified together - returns arrays when specified'
00:50 [32m+324[0m[31m -18[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified fireworks - returns arrays when specified [1m[31m[E][0m[0m                                          
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 132:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns arrays when specified fireworks - returns arrays when specified'
00:50 [32m+324[0m[31m -19[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified cohere - returns arrays when specified [1m[31m[E][0m[0m                                             
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "7a595f75-e9b0-4eb9-96ca-2326464da0b6",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 132:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns arrays when specified cohere - returns arrays when specified'
00:50 [32m+325[0m[31m -19[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:50 [32m+326[0m[31m -19[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:51 [32m+326[0m[31m -19[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:51 [32m+326[0m[31m -20[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified lambda - returns arrays when specified [1m[31m[E][0m[0m                                             
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 132:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output returns arrays when specified lambda - returns arrays when specified'
00:51 [32m+326[0m[31m -21[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) anthropic - chef conversation with streaming [1m[31m[E][0m[0m               
  FormatException: Unexpected character (at character 1)
  I'll help you look up the recipe for grandma's mushroom omelette.
  ^
  
  dart:convert                                   jsonDecode
  test/typed_output_with_tools_test.dart 141:31  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) anthropic - chef conversation with streaming'
00:52 [32m+327[0m[31m -21[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:52 [32m+328[0m[31m -21[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:52 [32m+328[0m[31m -22[0m: test/http_reliability_test.dart: HTTP Reliability basic request handling (80% cases) ollama-openai:llama3.1: handles rapid sequential requests [1m[31m[E][0m[0m                                     
  Expected: contains '0'
    Actual: 'Zero.'
     Which: does not contain '0'
  
  package:matcher                        expect
  test/http_reliability_test.dart 70:11  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/http_reliability_test.dart 36:9   main.runProviderTest.<fn>
  

[1m[36mTo run this test again:[0m dart test test/http_reliability_test.dart -p vm --plain-name 'HTTP Reliability basic request handling (80% cases) ollama-openai:llama3.1: handles rapid sequential requests'
00:52 [32m+329[0m[31m -22[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:52 [32m+329[0m[31m -23[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) ollama - chef conversation with streaming [1m[31m[E][0m[0m                  
  Expected: contains 'Mushroom Omelette'
    Actual: 'lookup_recipe'
     Which: does not contain 'Mushroom Omelette'
  
  package:matcher                                expect
  test/typed_output_with_tools_test.dart 142:13  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) ollama - chef conversation with streaming'
00:53 [32m+330[0m[31m -23[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:53 [32m+331[0m[31m -23[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:53 [32m+332[0m[31m -23[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:53 [32m+333[0m[31m -23[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+333[0m[31m -23[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+333[0m[31m -24[0m: test/typed_output_with_tools_test.dart: typed output with tools multi-turn chat with typed output and tools (streaming) ollama-openai - chef conversation with streaming [1m[31m[E][0m[0m           
  Expected: contains 'Mushroom Omelette'
    Actual: 'lookup_recipe'
     Which: does not contain 'Mushroom Omelette'
  
  package:matcher                                expect
  test/typed_output_with_tools_test.dart 142:13  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_with_tools_test.dart -p vm --plain-name 'typed output with tools multi-turn chat with typed output and tools (streaming) ollama-openai - chef conversation with streaming'
00:54 [32m+333[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+334[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+335[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+336[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+337[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+338[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+339[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+340[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+341[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+342[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+343[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+344[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+345[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+346[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+347[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+348[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+349[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+350[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+351[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+352[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+353[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+354[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+355[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+356[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+357[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+358[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+359[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+360[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+361[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+362[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+363[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+364[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+365[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+366[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+367[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+368[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+369[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+370[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:54 [32m+371[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:55 [32m+371[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:55 [32m+372[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:55 [32m+373[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:55 [32m+374[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+374[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+375[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+376[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+377[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+378[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+379[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+380[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+381[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+382[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+383[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+384[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+385[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+386[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+387[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+388[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+389[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+390[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:56 [32m+391[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:57 [32m+391[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:57 [32m+392[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:57 [32m+393[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:57 [32m+394[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:57 [32m+395[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:58 [32m+395[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:58 [32m+396[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:58 [32m+397[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages multi turn chat ALL providers handle multi-turn conversation correctly[0m                                                                     00:58 [32m+398[0m[31m -24[0m: test/http_reliability_test.dart: HTTP Reliability streaming reliability (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: maintains stream connection[0m                       00:58 [32m+399[0m[31m -24[0m: test/http_reliability_test.dart: HTTP Reliability streaming reliability (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: maintains stream connection[0m                       00:59 [32m+399[0m[31m -24[0m: test/http_reliability_test.dart: HTTP Reliability streaming reliability (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: maintains stream connection[0m                       00:59 [32m+400[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+401[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+402[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+403[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+404[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+405[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      00:59 [32m+406[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      01:00 [32m+406[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      01:00 [32m+407[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      01:00 [32m+408[0m[31m -24[0m: test/agent_orchestration_test.dart: Agent Orchestration tool execution orchestration (80% cases) ollama-openai:llama3.1: multi-tool orchestration[0m                                      01:00 [32m+409[0m[31m -24[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) google-openai:gemini-2.0-flash: streams multiple tool calls[0m                                                        01:00 [32m+410[0m[31m -24[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) google-openai:gemini-2.0-flash: streams multiple tool calls[0m                                                        01:00 [32m+411[0m[31m -24[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified ollama-openai - returns arrays when specified[0m                                          01:00 [32m+412[0m[31m -24[0m: test/typed_output_test.dart: Typed Output basic structured output returns arrays when specified ollama-openai - returns arrays when specified[0m                                          01:00 [32m+413[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:00 [32m+414[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:01 [32m+414[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:01 [32m+415[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:01 [32m+416[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:01 [32m+417[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+417[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+418[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+419[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+420[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+421[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+422[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+423[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+424[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:02 [32m+425[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:03 [32m+425[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:03 [32m+426[0m[31m -24[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:03 [32m+426[0m[31m -25[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly together - handle structured output correctly [1m[31m[E][0m[0m                                 
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 161:26                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handle structured output correctly together - handle structured output correctly'
01:03 [32m+426[0m[31m -26[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly fireworks - handle structured output correctly [1m[31m[E][0m[0m                                
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 161:26                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handle structured output correctly fireworks - handle structured output correctly'
01:03 [32m+426[0m[31m -27[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly cohere - handle structured output correctly [1m[31m[E][0m[0m                                   
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "22bc3436-de59-4842-b455-e51475cda7b3",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 161:26                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handle structured output correctly cohere - handle structured output correctly'
01:03 [32m+427[0m[31m -27[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:03 [32m+427[0m[31m -28[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly lambda - handle structured output correctly [1m[31m[E][0m[0m                                   
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 161:26                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handle structured output correctly lambda - handle structured output correctly'
01:03 [32m+428[0m[31m -28[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:03 [32m+429[0m[31m -28[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+429[0m[31m -28[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+430[0m[31m -28[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+431[0m[31m -28[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+431[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly google - handle structured output correctly [1m[31m[E][0m[0m                                   
  Expected: <42>
    Actual: <null>
  Provider google should generate correct integer
  
  package:matcher                     expect
  test/typed_output_test.dart 173:11  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13   main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output basic structured output handle structured output correctly google - handle structured output correctly'
01:04 [32m+432[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+433[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:04 [32m+434[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:05 [32m+435[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:05 [32m+436[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:05 [32m+437[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:05 [32m+438[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:05 [32m+439[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+439[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+440[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+441[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+442[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+443[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+444[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+445[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+446[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:06 [32m+447[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:07 [32m+447[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages streaming ALL providers handle streaming correctly[0m                                                                                         01:07 [32m+448[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:07 [32m+449[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:07 [32m+450[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:07 [32m+451[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:07 [32m+452[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:08 [32m+452[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:08 [32m+453[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:08 [32m+454[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:08 [32m+455[0m[31m -29[0m: test/typed_output_test.dart: Typed Output basic structured output handle structured output correctly anthropic - handle structured output correctly[0m                                    01:08 [32m+456[0m[31m -29[0m: test/http_reliability_test.dart: HTTP Reliability streaming reliability (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles stream interruption[0m                       01:09 [32m+456[0m[31m -29[0m: test/http_reliability_test.dart: HTTP Reliability streaming reliability (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles stream interruption[0m                       01:09 [32m+457[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:09 [32m+458[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:10 [32m+458[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:10 [32m+459[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:10 [32m+460[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:10 [32m+461[0m[31m -29[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:10 [32m+461[0m[31m -30[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types openai - handles all primitive types [1m[31m[E][0m[0m                                                              
  OpenAIClientException({
    "uri": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "message": "Invalid schema for response_format 'output_schema': In context=(), 'required' is required to be supplied and to be an array including every key in properties. Missing 'null_field'.",
        "type": "invalid_request_error",
        "param": "response_format",
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types openai - handles all primitive types'
01:10 [32m+462[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+462[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+463[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+464[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+465[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+466[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:11 [32m+467[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:12 [32m+467[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:12 [32m+468[0m[31m -30[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:12 [32m+468[0m[31m -31[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types together - handles all primitive types [1m[31m[E][0m[0m                                                            
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types together - handles all primitive types'
01:12 [32m+468[0m[31m -32[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types fireworks - handles all primitive types [1m[31m[E][0m[0m                                                           
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types fireworks - handles all primitive types'
01:12 [32m+468[0m[31m -33[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types cohere - handles all primitive types [1m[31m[E][0m[0m                                                              
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "326a835f-f9f1-4aa5-9eef-b7b52410e78c",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types cohere - handles all primitive types'
01:12 [32m+469[0m[31m -33[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:12 [32m+469[0m[31m -34[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types lambda - handles all primitive types [1m[31m[E][0m[0m                                                              
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types lambda - handles all primitive types'
01:12 [32m+469[0m[31m -35[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types google - handles all primitive types [1m[31m[E][0m[0m                                                              
  Invalid argument(s): Invalid schema type: null
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 438:9   SchemaMapper.toSchema
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 423:55  SchemaMapper.toSchema.<fn>
  dart:collection                                                                               MapBase.map
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 420:47  SchemaMapper.toSchema
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 343:21  ChatToolListMapper.toToolList.<fn>
  dart:_internal                                                                                ListIterable.toList
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 346:16  ChatToolListMapper.toToolList
  package:langchain_compat/src/chat/chat_models/google_chat/google_chat_model.dart 162:27       GoogleChatModel._generateCompletionRequest
  package:langchain_compat/src/chat/chat_models/google_chat/google_chat_model.dart 92:9         GoogleChatModel.sendStream
  package:langchain_compat/src/agent.dart 438:40                                                Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                                 Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                            main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                             main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types google - handles all primitive types'
01:12 [32m+470[0m[31m -35[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:12 [32m+471[0m[31m -35[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:13 [32m+471[0m[31m -35[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:13 [32m+471[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types google-openai - handles all primitive types [1m[31m[E][0m[0m                                                       
  OpenAIClientException({
    "uri": "https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": [
      {
        "error": {
          "code": 400,
          "message": "Request contains an invalid argument.",
          "status": "INVALID_ARGUMENT"
        }
      }
    ]
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 208:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles all primitive types google-openai - handles all primitive types'
01:13 [32m+472[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:13 [32m+473[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:14 [32m+473[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:14 [32m+474[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:14 [32m+475[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:14 [32m+476[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+476[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+477[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+478[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+479[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+480[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+481[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:15 [32m+482[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:16 [32m+482[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:16 [32m+483[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:16 [32m+484[0m[31m -36[0m: test/chat_messages_test.dart: Chat Messages all providers - comprehensive test basic chat works across ALL providers[0m                                                                   01:16 [32m+485[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:16 [32m+486[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:16 [32m+487[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:17 [32m+487[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:17 [32m+488[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:17 [32m+489[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:18 [32m+489[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:18 [32m+490[0m[31m -36[0m: test/typed_output_test.dart: Typed Output data types handles all primitive types anthropic - handles all primitive types[0m                                                               01:18 [32m+491[0m[31m -36[0m: test/http_reliability_test.dart: HTTP Reliability concurrent request handling (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: handles parallel requests[0m                   01:18 [32m+492[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:19 [32m+492[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:19 [32m+493[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:19 [32m+494[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:19 [32m+495[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+495[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+496[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+497[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+498[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+499[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+500[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:20 [32m+501[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:21 [32m+501[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:21 [32m+502[0m[31m -36[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) cohere:command-r-plus: tool streaming preserves order[0m                                                              01:21 [32m+503[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:21 [32m+504[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+504[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+505[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+506[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+507[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+508[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:22 [32m+509[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:23 [32m+509[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:23 [32m+510[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+510[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+511[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+512[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+513[0m[31m -36[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+513[0m[31m -37[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints together - respects enum constraints [1m[31m[E][0m[0m                                                                
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 239:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types respects enum constraints together - respects enum constraints'
01:24 [32m+513[0m[31m -38[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints fireworks - respects enum constraints [1m[31m[E][0m[0m                                                               
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 239:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types respects enum constraints fireworks - respects enum constraints'
01:24 [32m+514[0m[31m -38[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:24 [32m+514[0m[31m -39[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints cohere - respects enum constraints [1m[31m[E][0m[0m                                                                  
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "c1158901-5996-494c-acde-3d0731ffdf89",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 239:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types respects enum constraints cohere - respects enum constraints'
01:24 [32m+515[0m[31m -39[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+515[0m[31m -39[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+515[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints lambda - respects enum constraints [1m[31m[E][0m[0m                                                                  
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 239:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types respects enum constraints lambda - respects enum constraints'
01:25 [32m+516[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+517[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+518[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+519[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:25 [32m+520[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:26 [32m+520[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:26 [32m+521[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:26 [32m+522[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:26 [32m+523[0m[31m -40[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates user message creation[0m     01:26 [32m+524[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:27 [32m+524[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:27 [32m+525[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:27 [32m+526[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:27 [32m+527[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:27 [32m+528[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:28 [32m+528[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:28 [32m+529[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:28 [32m+530[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:28 [32m+531[0m[31m -40[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: tool streaming preserves order[0m                                               01:28 [32m+532[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:28 [32m+533[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:28 [32m+534[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+534[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+535[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+536[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+537[0m[31m -40[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+537[0m[31m -41[0m: test/logging_test.dart: Logging basic logging setup (80% cases) logging can be configured per logger [1m[31m[E][0m[0m                                                                               
  Unsupported operation: Please set "hierarchicalLoggingEnabled" to true if you want to change the level on a non-root logger.
  package:logging/src/logger.dart 137:7  Logger.level=
  test/logging_test.dart 35:16           main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/logging_test.dart -p vm --plain-name 'Logging basic logging setup (80% cases) logging can be configured per logger'
01:29 [32m+538[0m[31m -41[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+539[0m[31m -41[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+540[0m[31m -41[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+541[0m[31m -41[0m: test/typed_output_test.dart: Typed Output data types respects enum constraints anthropic - respects enum constraints[0m                                                                   01:29 [32m+542[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:29 [32m+543[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:29 [32m+544[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+544[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+545[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+546[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+547[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+548[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+549[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+550[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+551[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+552[0m[31m -41[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:30 [32m+552[0m[31m -42[0m: test/logging_test.dart: Logging edge cases handles log exceptions gracefully [1m[31m[E][0m[0m                                                                                                       
  Exception: Bad listener
  test/logging_test.dart 252:11           main.<fn>.<fn>.<fn>.<fn>
  dart:async                              _BroadcastStreamController.add
  package:logging/src/logger.dart 314:51  Logger._publish
  package:logging/src/logger.dart 238:14  Logger.log
  package:logging/src/logger.dart 282:7   Logger.info
  test/logging_test.dart 262:16           main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/logging_test.dart -p vm --plain-name 'Logging edge cases handles log exceptions gracefully'
01:30 [32m+553[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+553[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+554[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+555[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+556[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+557[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:31 [32m+558[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+558[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+559[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+560[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+561[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+562[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:32 [32m+563[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:33 [32m+563[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:33 [32m+564[0m[31m -42[0m: test/streaming_test.dart: Streaming tool call streaming (80% cases) ollama:qwen2.5:7b-instruct: tool streaming preserves order[0m                                                         01:33 [32m+565[0m[31m -42[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:33 [32m+566[0m[31m -42[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:33 [32m+567[0m[31m -42[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:33 [32m+567[0m[31m -43[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints together - handles numeric constraints [1m[31m[E][0m[0m                                                            
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 260:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles numeric constraints together - handles numeric constraints'
01:34 [32m+567[0m[31m -44[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints fireworks - handles numeric constraints [1m[31m[E][0m[0m                                                           
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 260:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles numeric constraints fireworks - handles numeric constraints'
01:34 [32m+568[0m[31m -44[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:34 [32m+568[0m[31m -45[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints cohere - handles numeric constraints [1m[31m[E][0m[0m                                                              
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "0d3c5c92-1d92-45d0-840e-ddd52d964220",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 260:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles numeric constraints cohere - handles numeric constraints'
01:34 [32m+568[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints lambda - handles numeric constraints [1m[31m[E][0m[0m                                                              
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 260:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output data types handles numeric constraints lambda - handles numeric constraints'
01:35 [32m+569[0m[31m -46[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:35 [32m+570[0m[31m -46[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: simple single-turn chat[0m                                    01:35 [32m+571[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:35 [32m+572[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+572[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+573[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+574[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+575[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+576[0m[31m -46[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles text file attachment[0m                          01:36 [32m+577[0m[31m -46[0m: test/usage_tracking_test.dart: Usage Tracking cumulative usage tracking tracks consistent usage for identical requests[0m                                                                 01:36 [32m+578[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+578[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+579[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+580[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+581[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+582[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+583[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+584[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:37 [32m+585[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+585[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+586[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+587[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+588[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+589[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+590[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+591[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+592[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:38 [32m+593[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:39 [32m+593[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:39 [32m+594[0m[31m -46[0m: test/typed_output_test.dart: Typed Output data types handles numeric constraints anthropic - handles numeric constraints[0m                                                               01:39 [32m+595[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:39 [32m+596[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:39 [32m+597[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+597[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+598[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+599[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+600[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+601[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:40 [32m+602[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+602[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+603[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+604[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+605[0m[31m -46[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+605[0m[31m -47[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures openai - generates valid recursive structures [1m[31m[E][0m[0m                                       
  OpenAIClientException({
    "uri": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "message": "Invalid schema for response_format 'output_schema': In context=('properties', 'children', 'items'), 'required' is required to be supplied and to be an array including every key in properties. Missing 'age'.",
        "type": "invalid_request_error",
        "param": "response_format",
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 295:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures openai - generates valid recursive structures'
01:41 [32m+606[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:41 [32m+607[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:42 [32m+607[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:42 [32m+608[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:42 [32m+609[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:43 [32m+609[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:43 [32m+610[0m[31m -47[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:43 [32m+610[0m[31m -48[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures together - generates valid recursive structures [1m[31m[E][0m[0m                                     
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 295:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures together - generates valid recursive structures'
01:43 [32m+611[0m[31m -49[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: streaming with conversation history[0m                              01:43 [32m+611[0m[31m -49[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures fireworks - generates valid recursive structures [1m[31m[E][0m[0m                                    
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 295:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures fireworks - generates valid recursive structures'
01:43 [32m+611[0m[31m -50[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures cohere - generates valid recursive structures [1m[31m[E][0m[0m                                       
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "64660e44-2020-489b-9cbc-d6e8ac6ce29b",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 295:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures cohere - generates valid recursive structures'
01:44 [32m+611[0m[31m -51[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures lambda - generates valid recursive structures [1m[31m[E][0m[0m                                       
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 295:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures lambda - generates valid recursive structures'
01:45 [32m+611[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures google - generates valid recursive structures [1m[31m[E][0m[0m                                       
  Expected: <Instance of 'List'>
    Actual: <null>
     Which: is not an instance of 'List'
  
  package:matcher                    expect
  test/typed_output_test.dart 303:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas generates valid recursive structures google - generates valid recursive structures'
01:45 [32m+612[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:45 [32m+613[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:46 [32m+613[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:46 [32m+614[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:47 [32m+614[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:47 [32m+615[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:47 [32m+616[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:47 [32m+617[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:48 [32m+617[0m[31m -52[0m: test/usage_tracking_test.dart: Usage Tracking cost calculation cost scales with usage[0m                                                                                                  01:48 [32m+618[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:48 [32m+619[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:48 [32m+620[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:48 [32m+621[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:49 [32m+621[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:49 [32m+622[0m[31m -52[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: orchestrates conversation history[0m      01:49 [32m+623[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:50 [32m+623[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:50 [32m+624[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:50 [32m+625[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:50 [32m+626[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:50 [32m+627[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:51 [32m+627[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:51 [32m+628[0m[31m -52[0m: test/typed_output_test.dart: Typed Output complex schemas generates valid recursive structures anthropic - generates valid recursive structures[0m                                        01:51 [32m+629[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:51 [32m+630[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:51 [32m+631[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+631[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+632[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+633[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+634[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+635[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+636[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+637[0m[31m -52[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history[0m                                                        01:52 [32m+637[0m[31m -53[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history [1m[31m[E][0m[0m                                                    
  Expected: contains '42'
    Actual: 'I\'m sorry, but I don\'t have information about your personal preferences unless you provide it to me. As an AI chatbot, I can assist you with a range of tasks and provide thorough responses, but I don\'t have access to your personal information or preferences unless you share them with me.'
     Which: does not contain '42'
  
  package:matcher                 expect
  test/streaming_test.dart 223:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/streaming_test.dart 38:9   main.runProviderTest.<fn>
  

[1m[36mTo run this test again:[0m dart test test/streaming_test.dart -p vm --plain-name 'Streaming multi-turn streaming (80% cases) cohere:command-r-plus: streaming with conversation history'
01:53 [32m+638[0m[31m -53[0m: test/usage_tracking_test.dart: Usage Tracking edge cases (limited providers) handles missing usage data gracefully[0m                                                                     01:53 [32m+639[0m[31m -53[0m: test/usage_tracking_test.dart: Usage Tracking edge cases (limited providers) handles missing usage data gracefully[0m                                                                     01:54 [32m+639[0m[31m -53[0m: test/usage_tracking_test.dart: Usage Tracking edge cases (limited providers) handles missing usage data gracefully[0m                                                                     01:54 [32m+640[0m[31m -53[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: orchestrates conversation history[0m                   01:54 [32m+641[0m[31m -53[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: orchestrates conversation history[0m                   01:54 [32m+642[0m[31m -53[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: orchestrates conversation history[0m                   01:54 [32m+643[0m[31m -53[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming with conversation history[0m                                           01:55 [32m+643[0m[31m -53[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming with conversation history[0m                                           01:55 [32m+644[0m[31m -53[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: streaming with conversation history[0m                                           01:55 [32m+645[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:55 [32m+646[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:56 [32m+646[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:56 [32m+647[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:56 [32m+648[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:57 [32m+648[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:57 [32m+649[0m[31m -53[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openai - handles union types with anyOf[0m                                                       01:57 [32m+650[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+651[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+652[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+653[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+654[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+655[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+656[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+657[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+658[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+659[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+660[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+661[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+662[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+663[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+664[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+665[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+666[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+667[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+668[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+669[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+670[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+671[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+672[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+673[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+674[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+675[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+676[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+677[0m[31m -53[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:57 [32m+677[0m[31m -54[0m: test/provider_capabilities_test.dart: Provider Capabilities capability enforcement (80% cases) providers without tool support reject tools [1m[31m[E][0m[0m                                         
  Expected: throws <Instance of 'ArgumentError'>
    Actual: <Closure: () => Agent>
     Which: returned <Instance of 'Agent'>
  
  package:matcher                             expect
  test/provider_capabilities_test.dart 75:11  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/provider_capabilities_test.dart -p vm --plain-name 'Provider Capabilities capability enforcement (80% cases) providers without tool support reject tools'
01:58 [32m+678[0m[31m -54[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:58 [32m+679[0m[31m -54[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:58 [32m+680[0m[31m -54[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:59 [32m+680[0m[31m -54[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles mixed file types[0m                              01:59 [32m+681[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+682[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+683[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+684[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+685[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+686[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+687[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+688[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+689[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+690[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+691[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+692[0m[31m -54[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf openrouter - handles union types with anyOf[0m                                                   01:59 [32m+693[0m[31m -54[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+693[0m[31m -55[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf together - handles union types with anyOf [1m[31m[E][0m[0m                                                 
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 329:22                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas handles union types with anyOf together - handles union types with anyOf'
01:59 [32m+693[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+694[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+695[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+696[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+697[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+698[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+699[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+700[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+701[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+702[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+703[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+704[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+705[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+706[0m[31m -55[0m: test/agent_orchestration_test.dart: Agent Orchestration message flow orchestration (80% cases) ollama:qwen2.5:7b-instruct: orchestrates conversation history[0m                           01:59 [32m+706[0m[31m -56[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf fireworks - handles union types with anyOf [1m[31m[E][0m[0m                                                
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 329:22                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas handles union types with anyOf fireworks - handles union types with anyOf'
01:59 [32m+706[0m[31m -57[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf cohere - handles union types with anyOf [1m[31m[E][0m[0m                                                   
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "fe98a176-5151-4f79-81d4-3fdd8161359f",
      "message": "property value must have a type"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 329:22                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas handles union types with anyOf cohere - handles union types with anyOf'
01:59 [32m+707[0m[31m -57[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:00 [32m+707[0m[31m -57[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:00 [32m+707[0m[31m -58[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf lambda - handles union types with anyOf [1m[31m[E][0m[0m                                                   
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 329:22                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas handles union types with anyOf lambda - handles union types with anyOf'
02:00 [32m+707[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf google - handles union types with anyOf [1m[31m[E][0m[0m                                                   
  type 'Null' is not a subtype of type 'String' in type cast
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 367:37  SchemaMapper.toSchema
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 423:55  SchemaMapper.toSchema.<fn>
  dart:collection                                                                               MapBase.map
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 420:47  SchemaMapper.toSchema
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 343:21  ChatToolListMapper.toToolList.<fn>
  dart:_internal                                                                                ListIterable.toList
  package:langchain_compat/src/chat/chat_models/google_chat/google_message_mappers.dart 346:16  ChatToolListMapper.toToolList
  package:langchain_compat/src/chat/chat_models/google_chat/google_chat_model.dart 162:27       GoogleChatModel._generateCompletionRequest
  package:langchain_compat/src/chat/chat_models/google_chat/google_chat_model.dart 92:9         GoogleChatModel.sendStream
  package:langchain_compat/src/agent.dart 438:40                                                Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                                 Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 329:22                                                            main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                             main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex schemas handles union types with anyOf google - handles union types with anyOf'
02:00 [32m+708[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:01 [32m+708[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:01 [32m+709[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:01 [32m+710[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:01 [32m+711[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) anthropic:claude-3-5-sonnet-20241022: streaming with conversation history[0m                                         02:01 [32m+712[0m[31m -59[0m: test/tool_id_coordination_test.dart: ... Coordination ALL providers generate unique tool IDs tool IDs are unique and properly matched openai - tool IDs are unique and properly matched[0m02:01 [32m+713[0m[31m -59[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) openai:gpt-4o-mini: orchestrates streaming response[0m                                        02:01 [32m+714[0m[31m -59[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) cohere:command-r-plus: handles longer prompts[0m                                                               02:02 [32m+714[0m[31m -59[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) cohere:command-r-plus: handles longer prompts[0m                                                               02:02 [32m+715[0m[31m -59[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) cohere:command-r-plus: handles longer prompts[0m                                                               02:02 [32m+716[0m[31m -59[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) cohere:command-r-plus: handles longer prompts[0m                                                               02:03 [32m+716[0m[31m -59[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) cohere:command-r-plus: handles longer prompts[0m                                                               02:03 [32m+717[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) openai:gpt-4o-mini: handles multiple URLs[0m                                                   02:03 [32m+718[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) openai:gpt-4o-mini: handles multiple URLs[0m                                                   02:04 [32m+718[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) openai:gpt-4o-mini: handles multiple URLs[0m                                                   02:04 [32m+719[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) openai:gpt-4o-mini: handles multiple URLs[0m                                                   02:04 [32m+720[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:04 [32m+721[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:05 [32m+721[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:05 [32m+722[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:06 [32m+722[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:06 [32m+723[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:06 [32m+724[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:07 [32m+724[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:07 [32m+725[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:07 [32m+726[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:07 [32m+727[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:07 [32m+728[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:08 [32m+728[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:08 [32m+729[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:08 [32m+730[0m[31m -59[0m: test/typed_output_test.dart: Typed Output complex schemas handles union types with anyOf anthropic - handles union types with anyOf[0m                                                    02:08 [32m+731[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:08 [32m+732[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:08 [32m+733[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:09 [32m+733[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:09 [32m+734[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:09 [32m+735[0m[31m -59[0m: test/multi_modal_test.dart: Multi-Modal General-purpose multi-modal (images + text + PDFs) anthropic:claude-3-5-sonnet-20241022: handles multiple URLs[0m                                 02:09 [32m+736[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:09 [32m+737[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:09 [32m+738[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:10 [32m+738[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:10 [32m+739[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:10 [32m+740[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:10 [32m+741[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+741[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+742[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+743[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+744[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+745[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:11 [32m+746[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:12 [32m+746[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:12 [32m+747[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:12 [32m+748[0m[31m -59[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:12 [32m+748[0m[31m -60[0m: test/typed_output_test.dart: Typed Output provider differences handles provider-specific formats together - handles provider-specific formats [1m[31m[E][0m[0m                                      
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 361:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider differences handles provider-specific formats together - handles provider-specific formats'
02:12 [32m+748[0m[31m -61[0m: test/typed_output_test.dart: Typed Output provider differences handles provider-specific formats fireworks - handles provider-specific formats [1m[31m[E][0m[0m                                     
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 361:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider differences handles provider-specific formats fireworks - handles provider-specific formats'
02:12 [32m+749[0m[31m -61[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:12 [32m+749[0m[31m -62[0m: test/typed_output_test.dart: Typed Output provider differences handles provider-specific formats cohere - handles provider-specific formats [1m[31m[E][0m[0m                                        
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "a67cfd80-1139-4333-97bd-bdcc0db8b167",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 361:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider differences handles provider-specific formats cohere - handles provider-specific formats'
02:13 [32m+749[0m[31m -63[0m: test/typed_output_test.dart: Typed Output provider differences handles provider-specific formats lambda - handles provider-specific formats [1m[31m[E][0m[0m                                        
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 361:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider differences handles provider-specific formats lambda - handles provider-specific formats'
02:13 [32m+750[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:13 [32m+751[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:14 [32m+751[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:14 [32m+752[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:14 [32m+753[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:14 [32m+754[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:14 [32m+755[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:15 [32m+755[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:15 [32m+756[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:16 [32m+756[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:17 [32m+756[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:17 [32m+757[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:17 [32m+758[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:18 [32m+758[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:18 [32m+759[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:19 [32m+759[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:19 [32m+760[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:19 [32m+761[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:20 [32m+761[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:20 [32m+762[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:20 [32m+763[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:21 [32m+763[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:21 [32m+764[0m[31m -63[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openai:gpt-4o-mini: multi-turn streaming maintains context[0m                                                        02:21 [32m+765[0m[31m -63[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) ollama-openai:llama3.1: handles longer prompts[0m                                                              02:21 [32m+766[0m[31m -63[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) ollama-openai:llama3.1: handles longer prompts[0m                                                              02:22 [32m+766[0m[31m -63[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) ollama-openai:llama3.1: handles longer prompts[0m                                                              02:22 [32m+767[0m[31m -63[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) ollama-openai:llama3.1: handles longer prompts[0m                                                              02:22 [32m+767[0m[31m -64[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers together - structured output works across supporting providers [1m[31m[E][0m[0m
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 386:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers together - structured output works across supporting providers'
02:22 [32m+768[0m[31m -64[0m: test/chat_models_test.dart: Chat Models basic chat completions (80% cases) ollama-openai:llama3.1: handles longer prompts[0m                                                              02:22 [32m+768[0m[31m -65[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers fireworks - structured output works across supporting providers [1m[31m[E][0m[0m
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 386:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers fireworks - structured output works across supporting providers'
02:22 [32m+768[0m[31m -66[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers cohere - structured output works across supporting providers [1m[31m[E][0m[0m
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "1c74b369-99c9-48dd-ade8-8b1cb674cfd0",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 386:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers cohere - structured output works across supporting providers'
02:22 [32m+769[0m[31m -66[0m: test/tool_id_coordination_test.dart: ... ALL providers generate unique tool IDs tool IDs are unique and properly matched ollama-openai - tool IDs are unique and properly matched[0m      02:22 [32m+769[0m[31m -67[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) together:meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo: handles multiple images [1m[31m[E][0m[0m                     
  OpenAIClientException({
    "uri": "https://api.together.xyz/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "o2nLg8R-62bZhn-95e11c8bbca7f820",
      "error": {
        "message": "Input validation error",
        "type": "invalid_request_error",
        "param": null,
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/multi_modal_test.dart 312:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/multi_modal_test.dart 100:9                                                        main.runVisionOnlyTest.<fn>
  

[1m[36mTo run this test again:[0m dart test test/multi_modal_test.dart -p vm --plain-name 'Multi-Modal Vision-only multi-modal (images only) together:meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo: handles multiple images'
02:22 [32m+769[0m[31m -68[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers lambda - structured output works across supporting providers [1m[31m[E][0m[0m
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 386:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers lambda - structured output works across supporting providers'
02:23 [32m+770[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:23 [32m+771[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:23 [32m+772[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:23 [32m+773[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:24 [32m+773[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:24 [32m+774[0m[31m -68[0m: test/agent_orchestration_test.dart: Agent Orchestration streaming orchestration (80% cases) anthropic:claude-3-5-sonnet-20241022: orchestrates streaming with tools[0m                    02:24 [32m+775[0m[31m -68[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:24 [32m+776[0m[31m -68[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:24 [32m+777[0m[31m -68[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:25 [32m+777[0m[31m -68[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:25 [32m+778[0m[31m -68[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:25 [32m+778[0m[31m -69[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) lambda:llama3.2-11b-vision-instruct: handles multiple images [1m[31m[E][0m[0m                                         
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "At most 1 image(s) may be provided in one request. You can set `--limit-mm-per-prompt` to increase this limit if the model supports it. None",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/multi_modal_test.dart 312:24                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/multi_modal_test.dart 100:9                                                        main.runVisionOnlyTest.<fn>
  

[1m[36mTo run this test again:[0m dart test test/multi_modal_test.dart -p vm --plain-name 'Multi-Modal Vision-only multi-modal (images only) lambda:llama3.2-11b-vision-instruct: handles multiple images'
02:25 [32m+779[0m[31m -69[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:26 [32m+779[0m[31m -69[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:26 [32m+780[0m[31m -69[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:27 [32m+780[0m[31m -69[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:27 [32m+781[0m[31m -69[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) openrouter:google/gemini-2.5-flash: multi-turn streaming maintains context[0m                                        02:27 [32m+782[0m[31m -69[0m: test/typed_output_test.dart: ... all providers - typed output structured output works across supporting providers anthropic - structured output works across supporting providers[0m      02:27 [32m+783[0m[31m -69[0m: test/typed_output_test.dart: ... all providers - typed output structured output works across supporting providers anthropic - structured output works across supporting providers[0m      02:28 [32m+783[0m[31m -69[0m: test/typed_output_test.dart: ... all providers - typed output structured output works across supporting providers anthropic - structured output works across supporting providers[0m      02:28 [32m+784[0m[31m -69[0m: test/typed_output_test.dart: ... all providers - typed output structured output works across supporting providers anthropic - structured output works across supporting providers[0m      02:28 [32m+785[0m[31m -69[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) ollama:llava:7b: handles multiple images[0m                                                                 02:29 [32m+785[0m[31m -69[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) ollama:llava:7b: handles multiple images[0m                                                                 02:29 [32m+786[0m[31m -69[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) ollama:llava:7b: handles multiple images[0m                                                                 02:29 [32m+786[0m[31m -70[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers ollama - structured output works across supporting providers [1m[31m[E][0m[0m
  Expected: 'test'
    Actual: 'return_result'
     Which: is different.
            Expected: test
              Actual: return_res ...
                      ^
             Differ at offset 0
  Provider ollama should return correct name
  
  package:matcher                    expect
  test/typed_output_test.dart 393:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers ollama - structured output works across supporting providers'
02:30 [32m+787[0m[31m -70[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) ollama:llava:7b: handles multiple images[0m                                                                 02:30 [32m+788[0m[31m -70[0m: test/multi_modal_test.dart: Multi-Modal Vision-only multi-modal (images only) ollama:llava:7b: handles multiple images[0m                                                                 02:30 [32m+789[0m[31m -70[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:30 [32m+789[0m[31m -71[0m: test/typed_output_test.dart: Typed Output all providers - typed output structured output works across supporting providers ollama-openai - structured output works across supporting providers [1m[31m[E][0m[0m
  Expected: 'test'
    Actual: 'return_result'
     Which: is different.
            Expected: test
              Actual: return_res ...
                      ^
             Differ at offset 0
  Provider ollama-openai should return correct name
  
  package:matcher                    expect
  test/typed_output_test.dart 393:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output all providers - typed output structured output works across supporting providers ollama-openai - structured output works across supporting providers'
02:30 [32m+790[0m[31m -71[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:30 [32m+790[0m[31m -72[0m: test/typed_output_test.dart: Typed Output edge cases (limited providers) handles schema validation errors [1m[31m[E][0m[0m                                                                          
  OpenAIClientException({
    "uri": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "message": "Invalid schema for response_format 'output_schema': In context=(), 'required' is required to be supplied and to be an array including every key in properties. Extra required key 'another_required_field' supplied.",
        "type": "invalid_request_error",
        "param": "response_format",
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 426:26                                                      main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output edge cases (limited providers) handles schema validation errors'
02:32 [32m+791[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:33 [32m+791[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:33 [32m+792[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:33 [32m+793[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:34 [32m+793[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:34 [32m+794[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:34 [32m+795[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:35 [32m+795[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:35 [32m+796[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:35 [32m+797[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:36 [32m+797[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:36 [32m+798[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:37 [32m+798[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:37 [32m+799[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:37 [32m+800[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:38 [32m+800[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:38 [32m+801[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:38 [32m+802[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:38 [32m+803[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+803[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+804[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+805[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+806[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+807[0m[31m -72[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:39 [32m+807[0m[31m -73[0m: test/typed_output_test.dart: Typed Output streaming typed output streams JSON output correctly together - streams JSON output correctly [1m[31m[E][0m[0m                                            
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 479:9                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output streams JSON output correctly together - streams JSON output correctly'
02:39 [32m+807[0m[31m -74[0m: test/typed_output_test.dart: Typed Output streaming typed output streams JSON output correctly fireworks - streams JSON output correctly [1m[31m[E][0m[0m                                           
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 479:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output streams JSON output correctly fireworks - streams JSON output correctly'
02:39 [32m+807[0m[31m -75[0m: test/typed_output_test.dart: Typed Output streaming typed output streams JSON output correctly cohere - streams JSON output correctly [1m[31m[E][0m[0m                                              
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "45e5d00c-ba87-4895-bc41-8a54489f8eef",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 479:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output streams JSON output correctly cohere - streams JSON output correctly'
02:40 [32m+807[0m[31m -76[0m: test/typed_output_test.dart: Typed Output streaming typed output streams JSON output correctly lambda - streams JSON output correctly [1m[31m[E][0m[0m                                              
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 479:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output streams JSON output correctly lambda - streams JSON output correctly'
02:40 [32m+808[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:41 [32m+808[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:41 [32m+809[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:41 [32m+810[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:41 [32m+811[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:42 [32m+811[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:42 [32m+812[0m[31m -76[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: multi-turn streaming maintains context[0m                           02:42 [32m+813[0m[31m -76[0m: test/tool_id_coordination_test.dart: ... ALL providers generate unique tool IDs multiple calls to same tool have unique IDs google-openai - multiple calls to same tool have unique IDs[0m02:42 [32m+814[0m[31m -76[0m: test/tool_id_coordination_test.dart: ... ALL providers generate unique tool IDs multiple calls to same tool have unique IDs google-openai - multiple calls to same tool have unique IDs[0m02:42 [32m+815[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:43 [32m+815[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:44 [32m+815[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:44 [32m+816[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:44 [32m+817[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:45 [32m+817[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:45 [32m+818[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:46 [32m+818[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:46 [32m+819[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:46 [32m+820[0m[31m -76[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:46 [32m+820[0m[31m -77[0m: test/typed_output_test.dart: Typed Output streaming typed output streams JSON output correctly anthropic - streams JSON output correctly [1m[31m[E][0m[0m                                           
  FormatException: Unexpected character (at character 1)
  I'll help you generate that JSON using the return_result function with the ...
  ^
  
  dart:convert                        jsonDecode
  test/typed_output_test.dart 488:22  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13   main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output streams JSON output correctly anthropic - streams JSON output correctly'
02:47 [32m+821[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:47 [32m+822[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:47 [32m+823[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:47 [32m+824[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:48 [32m+824[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:48 [32m+825[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:49 [32m+825[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:49 [32m+826[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:50 [32m+826[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:50 [32m+827[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:50 [32m+828[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:50 [32m+829[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:50 [32m+830[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:51 [32m+830[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:51 [32m+831[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:52 [32m+831[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:52 [32m+832[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:52 [32m+833[0m[31m -77[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:52 [32m+833[0m[31m -78[0m: test/typed_output_test.dart: Typed Output streaming typed output handles complex schema in streaming together - handles complex schema in streaming [1m[31m[E][0m[0m                                
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 519:9                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output handles complex schema in streaming together - handles complex schema in streaming'
02:52 [32m+833[0m[31m -79[0m: test/typed_output_test.dart: Typed Output streaming typed output handles complex schema in streaming fireworks - handles complex schema in streaming [1m[31m[E][0m[0m                               
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 519:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output handles complex schema in streaming fireworks - handles complex schema in streaming'
02:52 [32m+833[0m[31m -80[0m: test/typed_output_test.dart: Typed Output streaming typed output handles complex schema in streaming cohere - handles complex schema in streaming [1m[31m[E][0m[0m                                  
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "74de4a90-6516-4f69-bfe8-d8c9887ccf17",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 519:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output handles complex schema in streaming cohere - handles complex schema in streaming'
02:52 [32m+834[0m[31m -80[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:53 [32m+834[0m[31m -80[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:53 [32m+834[0m[31m -81[0m: test/typed_output_test.dart: Typed Output streaming typed output handles complex schema in streaming lambda - handles complex schema in streaming [1m[31m[E][0m[0m                                  
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 519:9                                                       main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output handles complex schema in streaming lambda - handles complex schema in streaming'
02:53 [32m+835[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:54 [32m+835[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:54 [32m+836[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:54 [32m+837[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:55 [32m+838[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:55 [32m+839[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:56 [32m+839[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:57 [32m+839[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:57 [32m+840[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:58 [32m+840[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:59 [32m+840[0m[31m -81[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  02:59 [32m+840[0m[31m -82[0m: test/typed_output_test.dart: Typed Output streaming typed output handles complex schema in streaming anthropic - handles complex schema in streaming [1m[31m[E][0m[0m                               
  FormatException: Unexpected character (at character 1)
  I'll help create two users with the specified details and return them along...
  ^
  
  dart:convert                        jsonDecode
  test/typed_output_test.dart 527:22  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13   main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output streaming typed output handles complex schema in streaming anthropic - handles complex schema in streaming'
03:00 [32m+841[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:01 [32m+841[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:01 [32m+842[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:02 [32m+842[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:02 [32m+843[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:03 [32m+843[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:03 [32m+844[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:04 [32m+844[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:04 [32m+845[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:04 [32m+846[0m[31m -82[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:04 [32m+846[0m[31m -83[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output returns typed Map<String, dynamic> together - returns typed Map<String, dynamic> [1m[31m[E][0m[0m                                
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                         Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 550:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output returns typed Map<String, dynamic> together - returns typed Map<String, dynamic>'
03:05 [32m+846[0m[31m -84[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output returns typed Map<String, dynamic> fireworks - returns typed Map<String, dynamic> [1m[31m[E][0m[0m                               
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 550:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output returns typed Map<String, dynamic> fireworks - returns typed Map<String, dynamic>'
03:05 [32m+846[0m[31m -85[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output returns typed Map<String, dynamic> cohere - returns typed Map<String, dynamic> [1m[31m[E][0m[0m                                  
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "8c7a7f52-1cc5-4b4b-9898-9e0f29bdde7c",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 550:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output returns typed Map<String, dynamic> cohere - returns typed Map<String, dynamic>'
03:05 [32m+847[0m[31m -85[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:05 [32m+847[0m[31m -86[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output returns typed Map<String, dynamic> lambda - returns typed Map<String, dynamic> [1m[31m[E][0m[0m                                  
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 550:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output returns typed Map<String, dynamic> lambda - returns typed Map<String, dynamic>'
03:06 [32m+848[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:06 [32m+849[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:06 [32m+850[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:07 [32m+850[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:08 [32m+850[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:09 [32m+850[0m[31m -86[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history[0m                                                  03:09 [32m+850[0m[31m -87[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history [1m[31m[E][0m[0m                                              
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/chat_models_test.dart -p vm --plain-name 'Chat Models multi-turn conversations (80% cases) google:gemini-2.0-flash: basic conversation with history'
03:09 [32m+851[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:10 [32m+851[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:10 [32m+852[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:10 [32m+853[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:10 [32m+854[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:11 [32m+854[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:11 [32m+855[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:12 [32m+855[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:12 [32m+856[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:12 [32m+857[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:13 [32m+857[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:13 [32m+858[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:13 [32m+859[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:14 [32m+859[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:14 [32m+860[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:15 [32m+860[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:15 [32m+861[0m[31m -87[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:15 [32m+861[0m[31m -88[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output handles nested custom types together - handles nested custom types [1m[31m[E][0m[0m                                              
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                         Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 585:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output handles nested custom types together - handles nested custom types'
03:15 [32m+861[0m[31m -89[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output handles nested custom types fireworks - handles nested custom types [1m[31m[E][0m[0m                                             
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 585:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output handles nested custom types fireworks - handles nested custom types'
03:15 [32m+861[0m[31m -90[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output handles nested custom types cohere - handles nested custom types [1m[31m[E][0m[0m                                                
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "a3a3c46e-aafe-459a-9c05-1ea056db180a",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 585:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output handles nested custom types cohere - handles nested custom types'
03:15 [32m+862[0m[31m -90[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:15 [32m+862[0m[31m -91[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output handles nested custom types lambda - handles nested custom types [1m[31m[E][0m[0m                                                
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 333:22                                          Agent.runFor
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 585:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output handles nested custom types lambda - handles nested custom types'
03:16 [32m+863[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:17 [32m+863[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:17 [32m+864[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:17 [32m+865[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:18 [32m+865[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:18 [32m+866[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:19 [32m+866[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:20 [32m+866[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:20 [32m+867[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:21 [32m+867[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:21 [32m+868[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:22 [32m+868[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:22 [32m+869[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:23 [32m+869[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:23 [32m+870[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:23 [32m+871[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:24 [32m+871[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:24 [32m+872[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:24 [32m+873[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:25 [32m+873[0m[31m -91[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence[0m                                                                                         03:25 [32m+873[0m[31m -92[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence [1m[31m[E][0m[0m                                                                                     
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/tool_calling_test.dart -p vm --plain-name 'Tool Calling multiple tool calls calls multiple tools in sequence'
03:25 [32m+873[0m[31m -93[0m: test/typed_output_test.dart: Typed Output runFor<T>() typed output handles nested custom types ollama-openai - handles nested custom types [1m[31m[E][0m[0m                                         
  Expected: 'John Doe'
    Actual: 'return_result'
     Which: is different.
            Expected: John Doe
              Actual: return_res ...
                      ^
             Differ at offset 0
  
  package:matcher                    expect
  test/typed_output_test.dart 593:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output runFor<T>() typed output handles nested custom types ollama-openai - handles nested custom types'
03:25 [32m+873[0m[31m -94[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema openai - handles API response schema [1m[31m[E][0m[0m                                              
  OpenAIClientException({
    "uri": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "message": "Invalid schema for response_format 'output_schema': In context=('properties', 'data', 'properties', 'users', 'items', 'properties', 'profile'), 'required' is required to be supplied and to be an array including every key in properties. Missing 'avatar'.",
        "type": "invalid_request_error",
        "param": "response_format",
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 657:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema openai - handles API response schema'
03:25 [32m+874[0m[31m -94[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:26 [32m+874[0m[31m -94[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:27 [32m+874[0m[31m -94[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:27 [32m+875[0m[31m -94[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:27 [32m+876[0m[31m -94[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:27 [32m+876[0m[31m -95[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema together - handles API response schema [1m[31m[E][0m[0m                                            
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 657:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema together - handles API response schema'
03:27 [32m+876[0m[31m -96[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema fireworks - handles API response schema [1m[31m[E][0m[0m                                           
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 657:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema fireworks - handles API response schema'
03:27 [32m+876[0m[31m -97[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema cohere - handles API response schema [1m[31m[E][0m[0m                                              
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "85eacf87-3a8e-47e5-820b-2b9464a72e4f",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 657:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema cohere - handles API response schema'
03:28 [32m+876[0m[31m -98[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema lambda - handles API response schema [1m[31m[E][0m[0m                                              
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 657:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema lambda - handles API response schema'
03:28 [32m+877[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:29 [32m+877[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:29 [32m+878[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:30 [32m+878[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:30 [32m+879[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:30 [32m+879[0m[31m -98[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls calls multiple tools in sequence [1m[31m[E][0m[0m                                                                                     
  type 'Null' is not a subtype of type 'List<dynamic>' in type cast
  package:openai_dart/src/generated/schema/schema.g.dart 1022:37                             _$$CreateChatCompletionStreamResponseImplFromJson
  package:openai_dart/src/generated/schema/schema.freezed.dart 11943:7                       new _$CreateChatCompletionStreamResponseImpl.fromJson
  package:openai_dart/src/generated/schema/schema.freezed.dart 11674:46                      _$CreateChatCompletionStreamResponseFromJson
  package:openai_dart/src/generated/schema/create_chat_completion_stream_response.dart 57:7  new CreateChatCompletionStreamResponse.fromJson
  package:openai_dart/src/client.dart 111:50                                                 OpenAIClient.createChatCompletionStream.<fn>
  
03:31 [32m+880[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:31 [32m+881[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:32 [32m+881[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:32 [32m+882[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:33 [32m+882[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:33 [32m+883[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:34 [32m+883[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:35 [32m+883[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:35 [32m+884[0m[31m -98[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:35 [32m+884[0m[31m -99[0m: test/tool_calling_test.dart: Tool Calling multiple tool calls handles multiple different tools openrouter - handles multiple different tools [1m[31m[E][0m[0m                                       
  Expected: an object with length of <2>
    Actual: [
              ToolPart:ToolPart.result(id: tool_0_string_tool, name: string_tool, result: String result: multi openrouter),
              ToolPart:ToolPart.result(id: tool_1_int_tool, name: int_tool, result: 42),
              ToolPart:ToolPart.result(id: tool_0_string_tool, name: string_tool, result: String result: multi openrouter),
              ToolPart:ToolPart.result(id: tool_0_int_tool, name: int_tool, result: 42)
            ]
     Which: has length of <4>
  Provider openrouter should execute both tools
  
  package:matcher                    expect
  test/tool_calling_test.dart 263:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/tool_calling_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/tool_calling_test.dart -p vm --plain-name 'Tool Calling multiple tool calls handles multiple different tools openrouter - handles multiple different tools'
03:36 [32m+885[0m[31m -99[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:36 [32m+886[0m[31m -99[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:37 [32m+886[0m[31m -99[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:38 [32m+886[0m[31m -99[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:39 [32m+886[0m[31m -99[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history[0m                                           03:39 [32m+886[0m[31m -100[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history [1m[31m[E][0m[0m                                      
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/chat_models_test.dart -p vm --plain-name 'Chat Models multi-turn conversations (80% cases) google-openai:gemini-2.0-flash: basic conversation with history'
03:41 [32m+887[0m[31m -100[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: multi-turn streaming maintains context[0m                                       03:41 [32m+888[0m[31m -100[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) lambda:hermes-3-llama-3.1-405b-fp8: multi-turn streaming maintains context[0m                                       03:41 [32m+889[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:42 [32m+889[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:43 [32m+889[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:43 [32m+890[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:43 [32m+891[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:44 [32m+891[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:44 [32m+892[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:45 [32m+892[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:45 [32m+893[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:46 [32m+893[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:46 [32m+894[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:47 [32m+894[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:48 [32m+894[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:48 [32m+895[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:49 [32m+895[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:49 [32m+896[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:49 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:50 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:51 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:52 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:53 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:54 [32m+897[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:54 [32m+898[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:54 [32m+899[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:55 [32m+899[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:56 [32m+899[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:57 [32m+899[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:58 [32m+899[0m[31m -100[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema[0m                                                 03:58 [32m+899[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema google - handles API response schema [1m[31m[E][0m[0m                                             
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles API response schema google - handles API response schema'
03:58 [32m+900[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  03:59 [32m+900[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  03:59 [32m+901[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  03:59 [32m+902[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  04:00 [32m+902[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  04:00 [32m+903[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  04:01 [32m+903[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation cohere - multi-turn conversation with multiple tool calls and message validation[0m  04:01 [32m+904[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:01 [32m+905[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:02 [32m+905[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:03 [32m+905[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:03 [32m+906[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:03 [32m+907[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:04 [32m+907[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:04 [32m+908[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:05 [32m+908[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:05 [32m+909[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:06 [32m+909[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:06 [32m+910[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:07 [32m+910[0m[31m -101[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) google-openai:gemini-2.0-flash: multi-turn streaming maintains context[0m                                           04:07 [32m+911[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema anthropic - handles API response schema[0m                                              04:07 [32m+912[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema anthropic - handles API response schema[0m                                              04:08 [32m+912[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema anthropic - handles API response schema[0m                                              04:08 [32m+913[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema anthropic - handles API response schema[0m                                              04:09 [32m+913[0m[31m -101[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles API response schema anthropic - handles API response schema[0m                                              04:09 [32m+914[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:09 [32m+915[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:10 [32m+915[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:11 [32m+915[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:11 [32m+916[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:11 [32m+917[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:12 [32m+917[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:13 [32m+917[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:13 [32m+918[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:13 [32m+919[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:14 [32m+919[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:14 [32m+920[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:14 [32m+921[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:15 [32m+921[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:16 [32m+921[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:16 [32m+922[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:17 [32m+922[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:18 [32m+922[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:18 [32m+923[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:18 [32m+924[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:18 [32m+925[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:19 [32m+925[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:19 [32m+926[0m[31m -101[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:19 [32m+926[0m[31m -102[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration together - handles deeply nested configuration [1m[31m[E][0m[0m                           
  Invalid argument(s): Together AI does not support OpenAI-compatible tool calls. Their streaming API returns tools in a custom format with <|python_tag|> prefix instead of standard tool_calls.
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 51:9  new OpenAIChatModel
  package:langchain_compat/src/chat/chat_providers/openai_chat_provider.dart 50:12       OpenAIChatProvider.createModel
  package:langchain_compat/src/agent.dart 383:29                                         Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                          Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 715:24                                                     main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                      main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration together - handles deeply nested configuration'
04:19 [32m+926[0m[31m -103[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration fireworks - handles deeply nested configuration [1m[31m[E][0m[0m                          
  OpenAIClientException({
    "uri": "https://api.fireworks.ai/inference/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "object": "error",
        "type": "invalid_request_error",
        "code": "invalid_request_error",
        "message": "You cannot specify response format and function call at the same time"
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 715:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration fireworks - handles deeply nested configuration'
04:19 [32m+926[0m[31m -104[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration cohere - handles deeply nested configuration [1m[31m[E][0m[0m                             
  OpenAIClientException({
    "uri": "https://api.cohere.ai/compatibility/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "id": "ca6ae1a4-3f55-495b-8598-1c4779f6e53e",
      "message": "invalid request: response_format is not supported with tools, documents, search_queries_only (v1), or connectors (v1)"
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 715:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration cohere - handles deeply nested configuration'
04:19 [32m+927[0m[31m -104[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:20 [32m+927[0m[31m -104[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:20 [32m+927[0m[31m -105[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration lambda - handles deeply nested configuration [1m[31m[E][0m[0m                             
  OpenAIClientException({
    "uri": "https://api.lambda.ai/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "object": "error",
      "message": "\"auto\" tool choice requires --enable-auto-tool-choice and --tool-call-parser to be set",
      "type": "BadRequestError",
      "param": null,
      "code": 400
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 715:24                                                      main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13                                                       main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration lambda - handles deeply nested configuration'
04:20 [32m+928[0m[31m -105[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:20 [32m+928[0m[31m -106[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration google - handles deeply nested configuration [1m[31m[E][0m[0m                             
  Expected: '1.0.0'
    Actual: 'v1.0.0'
     Which: is different.
            Expected: 1.0.0
              Actual: v1.0.0
                      ^
             Differ at offset 0
  
  package:matcher                    expect
  test/typed_output_test.dart 725:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration google - handles deeply nested configuration'
04:21 [32m+929[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:21 [32m+930[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:22 [32m+930[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:22 [32m+931[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:23 [32m+931[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:24 [32m+931[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:24 [32m+932[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:25 [32m+932[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:26 [32m+932[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:26 [32m+933[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:27 [32m+933[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:28 [32m+933[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:28 [32m+934[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:28 [32m+935[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:29 [32m+935[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:30 [32m+935[0m[31m -106[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:30 [32m+935[0m[31m -107[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration ollama - handles deeply nested configuration [1m[31m[E][0m[0m                             
  Expected: 'MyApp'
    Actual: <null>
     Which: not an <Instance of 'String'>
  
  package:matcher                    expect
  test/typed_output_test.dart 724:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration ollama - handles deeply nested configuration'
04:33 [32m+935[0m[31m -108[0m: test/typed_output_test.dart: Typed Output complex real-world schemas handles deeply nested configuration ollama-openai - handles deeply nested configuration [1m[31m[E][0m[0m                      
  Expected: '1.0.0'
    Actual: 'v1.0.0'
     Which: is different.
            Expected: 1.0.0
              Actual: v1.0.0
                      ^
             Differ at offset 0
  
  package:matcher                    expect
  test/typed_output_test.dart 725:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 40:13  main.runProviderTest.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output complex real-world schemas handles deeply nested configuration ollama-openai - handles deeply nested configuration'
04:33 [32m+936[0m[31m -108[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:34 [32m+936[0m[31m -108[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:34 [32m+937[0m[31m -108[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:35 [32m+937[0m[31m -108[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:35 [32m+937[0m[31m -109[0m: test/typed_output_test.dart: Typed Output provider edge cases handles unicode and special characters [1m[31m[E][0m[0m                                                                              
  Expected: contains '世界'
    Actual: 'Hello ä¸ç'
     Which: does not contain '世界'
  
  package:matcher                     expect
  test/typed_output_test.dart 766:11  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider edge cases handles unicode and special characters'
04:35 [32m+937[0m[31m -110[0m: test/typed_output_test.dart: Typed Output provider edge cases handles empty collections [1m[31m[E][0m[0m                                                                                           
  OpenAIClientException({
    "uri": "https://api.openai.com/v1/chat/completions",
    "method": "POST",
    "code": 400,
    "message": "Unsuccessful response",
    "body": {
      "error": {
        "message": "Invalid schema for response_format 'output_schema': In context=(), 'required' is required to be supplied and to be an array including every key in properties. Missing 'nullableField'.",
        "type": "invalid_request_error",
        "param": "response_format",
        "code": null
      }
    }
  })
  package:openai_dart/src/generated/client.dart 301:5                                     OpenAIClient.makeRequestStream
  ===== asynchronous gap ===========================
  package:openai_dart/src/client.dart 99:15                                               OpenAIClient.createChatCompletionStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/chat/chat_models/openai_chat/openai_chat_model.dart 110:7  OpenAIChatModel.sendStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 438:7                                           Agent.runStream
  ===== asynchronous gap ===========================
  package:langchain_compat/src/agent.dart 233:5                                           Agent.run
  ===== asynchronous gap ===========================
  test/typed_output_test.dart 791:26                                                      main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider edge cases handles empty collections'
04:35 [32m+938[0m[31m -110[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:36 [32m+938[0m[31m -110[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:36 [32m+939[0m[31m -110[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:36 [32m+939[0m[31m -111[0m: test/typed_output_test.dart: Typed Output provider edge cases handles large numeric values [1m[31m[E][0m[0m                                                                                        
  Expected: a value greater than <100000000000000000000.0>
    Actual: <6.022>
     Which: is not a value greater than <100000000000000000000.0>
  
  package:matcher                     expect
  test/typed_output_test.dart 827:11  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/typed_output_test.dart -p vm --plain-name 'Typed Output provider edge cases handles large numeric values'
04:40 [32m+940[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:41 [32m+940[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:42 [32m+940[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:42 [32m+941[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:43 [32m+941[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:44 [32m+941[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:44 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:45 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:46 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:47 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:48 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:49 [32m+942[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:49 [32m+943[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:50 [32m+943[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:51 [32m+943[0m[31m -111[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:51 [32m+943[0m[31m -112[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) ollama:qwen2.5:7b-instruct: multi-turn streaming maintains context [1m[31m[E][0m[0m                                           
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/streaming_test.dart -p vm --plain-name 'Streaming multi-turn streaming (80% cases) ollama:qwen2.5:7b-instruct: multi-turn streaming maintains context'
04:52 [32m+944[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:53 [32m+944[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:54 [32m+944[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:54 [32m+945[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:55 [32m+945[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:56 [32m+945[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:57 [32m+945[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:58 [32m+945[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:58 [32m+946[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:59 [32m+946[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  04:59 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:00 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:01 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:02 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:03 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:04 [32m+947[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:04 [32m+948[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:05 [32m+948[0m[31m -112[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:05 [32m+948[0m[31m -113[0m: test/tool_calling_test.dart: Tool Calling edge cases (limited providers) handles very long string returns [1m[31m[E][0m[0m                                                                         
  Expected: (contains 'lorem ipsum' or contains 'long string' or contains 'text' or contains 'repeated')
    Actual: 'i\'ll help you call the very_long_string_tool with a repeat count of 10.'
  
  package:matcher                     expect
  test/tool_calling_test.dart 408:11  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/tool_calling_test.dart -p vm --plain-name 'Tool Calling edge cases (limited providers) handles very long string returns'
05:11 [32m+949[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:12 [32m+949[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:13 [32m+949[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:14 [32m+949[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:15 [32m+949[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:15 [32m+950[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:16 [32m+950[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:17 [32m+950[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:17 [32m+951[0m[31m -113[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:17 [32m+951[0m[31m -114[0m: test/tool_calling_test.dart: Tool Calling edge cases (limited providers) handles special characters in tool results [1m[31m[E][0m[0m                                                               
  Expected: contains 'Line 1'
    Actual: 'I\'ll help you call the special_chars_tool function to get information about special characters that need escaping.\n'
              'I\'ve called the special_chars_tool for you. The result shows several examples of special characters including:\n'
              '1. Line breaks\n'
              '2. Tab characters\n'
              '3. Windows-style line endings\n'
              '4. Double quotes\n'
              '5. Single quotes\n'
              '\n'
              'These are common special characters that often need to be escaped when working with strings in various programming and data contexts.'
     Which: does not contain 'Line 1'
  
  package:matcher                     expect
  test/tool_calling_test.dart 446:11  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/tool_calling_test.dart -p vm --plain-name 'Tool Calling edge cases (limited providers) handles special characters in tool results'
05:19 [32m+952[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:20 [32m+952[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:20 [32m+953[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:21 [32m+953[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:21 [32m+954[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:22 [32m+954[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:23 [32m+954[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:23 [32m+955[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:24 [32m+955[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:24 [32m+956[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:25 [32m+956[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:26 [32m+956[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:26 [32m+957[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:26 [32m+958[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:27 [32m+958[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:27 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:28 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:29 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:30 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:31 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:32 [32m+959[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:32 [32m+960[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:33 [32m+960[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:33 [32m+961[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:33 [32m+962[0m[31m -114[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:33 [32m+962[0m[31m -115[0m: test/tool_calling_test.dart: Tool Calling error handling rejects tools on unsupported providers [1m[31m[E][0m[0m                                                                                   
  Expected: throws <Instance of 'Exception'>
    Actual: <Closure: () => Agent>
     Which: returned <Instance of 'Agent'>
  
  package:matcher                    expect
  test/tool_calling_test.dart 523:9  main.<fn>.<fn>.<fn>
  

[1m[36mTo run this test again:[0m dart test test/tool_calling_test.dart -p vm --plain-name 'Tool Calling error handling rejects tools on unsupported providers'
05:34 [32m+963[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:35 [32m+963[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:35 [32m+964[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:35 [32m+965[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:36 [32m+965[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:36 [32m+966[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:37 [32m+966[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:38 [32m+966[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:39 [32m+966[0m[31m -115[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:39 [32m+966[0m[31m -116[0m: test/streaming_test.dart: Streaming multi-turn streaming (80% cases) ollama-openai:llama3.1: streaming with tool history [1m[31m[E][0m[0m                                                          
  Expected: contains '100'
    Actual: '{"name": "div_tool", "parameters": {"a": 10, "b": 2, "c": 5}} \n'
              '\n'
              'Note: The div_tool function is not defined in the provided code snippet. It should be assumed that it has a description like "Executes an expression and returns the result"'
     Which: does not contain '100'
  
  package:matcher                 expect
  test/streaming_test.dart 308:9  main.<fn>.<fn>.<fn>
  ===== asynchronous gap ===========================
  test/streaming_test.dart 38:9   main.runProviderTest.<fn>
  

[1m[36mTo run this test again:[0m dart test test/streaming_test.dart -p vm --plain-name 'Streaming multi-turn streaming (80% cases) ollama-openai:llama3.1: streaming with tool history'
05:39 [32m+967[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:40 [32m+967[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:40 [32m+968[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:40 [32m+969[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:40 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:41 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:42 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:43 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:44 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:45 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:46 [32m+970[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:46 [32m+971[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:47 [32m+971[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:47 [32m+972[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:48 [32m+972[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:49 [32m+972[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:50 [32m+972[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:50 [32m+973[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:51 [32m+973[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:51 [32m+974[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:51 [32m+975[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:52 [32m+975[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:52 [32m+976[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:53 [32m+976[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:53 [32m+977[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:54 [32m+977[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:54 [32m+978[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:55 [32m+978[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:56 [32m+978[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:56 [32m+979[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:57 [32m+979[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:57 [32m+980[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:58 [32m+980[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:58 [32m+981[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:59 [32m+981[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  05:59 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:00 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:01 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:02 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:03 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:04 [32m+982[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:04 [32m+983[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:04 [32m+984[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:05 [32m+984[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:05 [32m+985[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:06 [32m+985[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:06 [32m+986[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:07 [32m+986[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:08 [32m+986[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:08 [32m+987[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:08 [32m+988[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:09 [32m+988[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:10 [32m+988[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:10 [32m+989[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:11 [32m+989[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:11 [32m+990[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:12 [32m+990[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:13 [32m+990[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:14 [32m+990[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:14 [32m+991[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:15 [32m+991[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:15 [32m+992[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:16 [32m+992[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:16 [32m+993[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:17 [32m+993[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:17 [32m+994[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:18 [32m+994[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:18 [32m+995[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:19 [32m+995[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:20 [32m+995[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:21 [32m+995[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:21 [32m+996[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:22 [32m+996[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:22 [32m+997[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:23 [32m+997[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:23 [32m+998[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:24 [32m+998[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:25 [32m+998[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:26 [32m+998[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:26 [32m+999[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:27 [32m+999[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:28 [32m+999[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m  06:28 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:29 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:30 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:31 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:32 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:33 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:34 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:35 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:36 [32m+1000[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:36 [32m+1001[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:37 [32m+1001[0m[31m -116[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation google - multi-turn conversation with multiple tool calls and message validation[0m 06:37 [32m+1002[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:37 [32m+1003[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:38 [32m+1003[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:38 [32m+1004[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:39 [32m+1004[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:39 [32m+1005[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:40 [32m+1005[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:40 [32m+1006[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:41 [32m+1006[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:42 [32m+1006[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:43 [32m+1006[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:43 [32m+1007[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:44 [32m+1007[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:44 [32m+1008[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:45 [32m+1008[0m[31m -116[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns[0m                                              06:45 [32m+1008[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns [1m[31m[E][0m[0m                                          
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/chat_models_test.dart -p vm --plain-name 'Chat Models multi-turn conversations (80% cases) ollama:qwen2.5:7b-instruct: context retention across turns'
06:45 [32m+1009[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:46 [32m+1009[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:47 [32m+1009[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:48 [32m+1009[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:48 [32m+1010[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:49 [32m+1010[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:50 [32m+1010[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:50 [32m+1011[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:51 [32m+1011[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:51 [32m+1012[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:52 [32m+1012[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:53 [32m+1012[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:54 [32m+1012[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:55 [32m+1012[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation anthropic - multi-turn conversation with multiple tool calls and message validation[0m           06:55 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  06:56 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  06:57 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  06:58 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  06:59 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  07:00 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  07:01 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  07:02 [32m+1013[0m[31m -117[0m: test/chat_models_test.dart: Chat Models multi-turn conversations (80% cases) ollama-openai:llama3.1: context retention across turns[0m                                                  07:02 [32m+1014[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:03 [32m+1014[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:03 [32m+1015[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:04 [32m+1015[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:04 [32m+1016[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:05 [32m+1016[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:06 [32m+1016[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:06 [32m+1017[0m[31m -117[0m: test/system_integration_test.dart: ... conversation with multiple tool calls and message validation ollama - multi-turn conversation with multiple tool calls and message validation[0m 07:06 [32m+1018[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) fireworks:accounts/fireworks/models/llama-v3p1-70b-instruct: respects custom system prompt[0m                        07:06 [32m+1019[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:07 [32m+1019[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:07 [32m+1020[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:08 [32m+1020[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:08 [32m+1021[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:09 [32m+1021[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:10 [32m+1021[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:10 [32m+1022[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:10 [32m+1023[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:11 [32m+1023[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:11 [32m+1024[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:12 [32m+1024[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:13 [32m+1024[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:13 [32m+1025[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:14 [32m+1025[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:15 [32m+1025[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:15 [32m+1026[0m[31m -117[0m: test/system_integration_test.dart: ... with multiple tool calls and message validation ollama-openai - multi-turn conversation with multiple tool calls and message validation[0m       07:15 [32m+1027[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) ollama-openai:llama3.1: respects custom system prompt[0m                                                             07:16 [32m+1027[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) ollama-openai:llama3.1: respects custom system prompt[0m                                                             07:16 [32m+1028[0m[31m -117[0m: test/system_integration_test.dart: System Integration cross-provider workflows provider fallback scenario[0m                                                                            07:16 [32m+1029[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) openai:gpt-4o-mini: system prompt with specific instructions[0m                                                      07:17 [32m+1029[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) openai:gpt-4o-mini: system prompt with specific instructions[0m                                                      07:17 [32m+1030[0m[31m -117[0m: test/system_integration_test.dart: System Integration cross-provider workflows provider-specific feature usage[0m                                                                       07:17 [32m+1031[0m[31m -117[0m: test/system_integration_test.dart: System Integration cross-provider workflows provider-specific feature usage[0m                                                                       07:18 [32m+1031[0m[31m -117[0m: test/system_integration_test.dart: System Integration cross-provider workflows provider-specific feature usage[0m                                                                       07:18 [32m+1032[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                         07:19 [32m+1032[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                         07:19 [32m+1033[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                         07:19 [32m+1033[0m[31m -117[0m: test/system_integration_test.dart: System Integration complex message handling multipart message with tool execution[0m                                                                 
  [33mSkip: Image validation issues[0m
07:19 [32m+1033[0m[33m ~1[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:19 [32m+1033[0m[33m ~1[0m[31m -117[0m: test/system_integration_test.dart: System Integration complex message handling conversation history with mixed message types[0m                                                      
  [33mSkip: Image validation issues[0m
07:19 [32m+1033[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:20 [32m+1033[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:21 [32m+1033[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:21 [32m+1034[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:22 [32m+1034[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:23 [32m+1034[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:24 [32m+1034[0m[33m ~2[0m[31m -117[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) together:meta-llama/Llama-3.2-3B-Instruct-Turbo: system prompt with specific instructions[0m                      07:24 [32m+1035[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:25 [32m+1035[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:25 [32m+1036[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:25 [32m+1037[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:26 [32m+1037[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:26 [32m+1038[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:26 [32m+1039[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:27 [32m+1039[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:27 [32m+1040[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:27 [32m+1041[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:28 [32m+1041[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:29 [32m+1041[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:29 [32m+1042[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:29 [32m+1043[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:30 [32m+1043[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:30 [32m+1044[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:31 [32m+1044[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:32 [32m+1044[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:32 [32m+1045[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:33 [32m+1045[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:33 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:34 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:35 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:36 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:37 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:38 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:39 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:40 [32m+1046[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:40 [32m+1047[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:41 [32m+1047[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:41 [32m+1048[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:42 [32m+1048[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:43 [32m+1048[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:43 [32m+1049[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:44 [32m+1049[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:44 [32m+1050[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:45 [32m+1050[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:46 [32m+1050[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:47 [32m+1050[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:47 [32m+1051[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:48 [32m+1051[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:48 [32m+1052[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:49 [32m+1052[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:49 [32m+1053[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:50 [32m+1053[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:51 [32m+1053[0m[33m ~2[0m[31m -117[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow[0m                                                07:51 [32m+1053[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow [1m[31m[E][0m[0m                                            
  TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts
  dart:isolate  _RawReceivePort._handleMessage
  

[1m[36mTo run this test again:[0m dart test test/system_integration_test.dart -p vm --plain-name 'System Integration error recovery and resilience graceful handling of tool failures in workflow'
07:52 [32m+1054[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) anthropic:claude-3-5-sonnet-20241022: system prompt persists across conversation[0m                               07:53 [32m+1054[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) anthropic:claude-3-5-sonnet-20241022: system prompt persists across conversation[0m                               07:54 [32m+1054[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) anthropic:claude-3-5-sonnet-20241022: system prompt persists across conversation[0m                               07:54 [32m+1055[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration error recovery and resilience conversation continuation after errors[0m                                                        07:55 [32m+1055[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration error recovery and resilience conversation continuation after errors[0m                                                        07:55 [32m+1056[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models system prompts (80% cases) ollama:qwen2.5:7b-instruct: system prompt persists across conversation[0m                                         07:55 [32m+1056[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration error recovery and resilience graceful handling of tool failures in workflow [1m[31m[E][0m[0m                                            
  type 'Null' is not a subtype of type 'List<dynamic>' in type cast
  package:openai_dart/src/generated/schema/schema.g.dart 1022:37                             _$$CreateChatCompletionStreamResponseImplFromJson
  package:openai_dart/src/generated/schema/schema.freezed.dart 11943:7                       new _$CreateChatCompletionStreamResponseImpl.fromJson
  package:openai_dart/src/generated/schema/schema.freezed.dart 11674:46                      _$CreateChatCompletionStreamResponseFromJson
  package:openai_dart/src/generated/schema/create_chat_completion_stream_response.dart 57:7  new CreateChatCompletionStreamResponse.fromJson
  package:openai_dart/src/client.dart 111:50                                                 OpenAIClient.createChatCompletionStream.<fn>
  
07:56 [32m+1057[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration performance and scaling large conversation history handling[0m                                                                 07:57 [32m+1057[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration performance and scaling large conversation history handling[0m                                                                 07:58 [32m+1057[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration performance and scaling large conversation history handling[0m                                                                 07:59 [32m+1058[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration performance and scaling large conversation history handling[0m                                                                 08:00 [32m+1058[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration performance and scaling large conversation history handling[0m                                                                 08:00 [32m+1059[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:01 [32m+1059[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:02 [32m+1059[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:02 [32m+1060[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:03 [32m+1060[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:04 [32m+1060[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:04 [32m+1061[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:05 [32m+1061[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles empty input gracefully[0m                                                                        08:05 [32m+1062[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:05 [32m+1063[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:06 [32m+1063[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:06 [32m+1064[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:06 [32m+1065[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:07 [32m+1065[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:08 [32m+1065[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:09 [32m+1065[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns code analysis workflow[0m                                                                            08:09 [32m+1066[0m[33m ~2[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:09 [32m+1066[0m[33m ~2[0m[31m -118[0m: test/system_integration_test.dart: System Integration real-world usage patterns research and summarization workflow[0m                                                               
  [33mSkip: URL validation issues[0m
08:09 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:10 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:11 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:12 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:13 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:14 [32m+1066[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:14 [32m+1067[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:14 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:15 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:16 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:17 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:18 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:19 [32m+1068[0m[33m ~3[0m[31m -118[0m: test/chat_models_test.dart: Chat Models edge cases google:gemini-2.0-flash: handles special characters[0m                                                                            08:19 [32m+1069[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) empty and minimal inputs[0m                                                                     08:20 [32m+1069[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) empty and minimal inputs[0m                                                                     08:20 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) empty and minimal inputs[0m                                                                     08:20 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:21 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:22 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:23 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:24 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:25 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:26 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:27 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:28 [32m+1070[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:28 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) special character handling across system[0m                                                     08:28 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:29 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:30 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:31 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:32 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:33 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:34 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:35 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:36 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:37 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:38 [32m+1071[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:38 [32m+1072[0m[33m ~3[0m[31m -118[0m: test/system_integration_test.dart: System Integration edge cases (limited providers) very long workflow chains[0m                                                                    08:38 [32m+1072[0m[33m ~3[0m[31m -118[0m: [31mSome tests failed.[0m                                                                                                                                                                

Consider enabling the flag chain-stack-traces to receive more detailed exceptions.
For example, 'dart test --chain-stack-traces'.
